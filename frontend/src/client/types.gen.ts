// This file is auto-generated by @hey-api/openapi-ts

export type AccessToken = {
    access_token: string;
    token_type?: string;
};

export type BodyAuthLoginForAccessToken = {
    grant_type?: string | null;
    username: string;
    password: string;
    scope?: string;
    client_id?: string | null;
    client_secret?: string | null;
};

export type CommentCreate = {
    content: string;
    problemID: number;
    userID: number;
};

export type CommentRead = {
    content: string;
    id: number;
    timePosted: string | null;
};

export type CommentUpdate = {
    content?: string | null;
};

export type ErrorResponse = {
    detail: string;
};

export type HttpValidationError = {
    detail?: Array<ValidationError>;
};

export type Message = {
    message: string;
};

export type NotificationCreate = {
    title: string;
    description: string;
    read: boolean;
    userID: number;
};

export type NotificationRead = {
    title: string;
    description: string;
    read: boolean;
    id: number;
    timePosted: string | null;
};

export type NotificationsList = {
    total: number;
    notifications: Array<NotificationRead>;
};

export type ProblemCreate = {
    title: string;
    block: string;
    description: string;
    difficulty: string;
    score: number;
};

export type ProblemRead = {
    title: string;
    block: string;
    description: string;
    difficulty: string;
    score: number;
    id: number;
    authorID: number;
};

export type ProblemUpdate = {
    title?: string | null;
    block?: string | null;
    description?: string | null;
    difficulty?: string | null;
    score?: number | null;
};

export type ReportCreate = {
    content: string;
    read: boolean;
    problemID: number;
    userID: number;
};

export type ReportRead = {
    content: string;
    read: boolean;
    problemID: number;
    userID: number;
    id: number;
    timePosted?: string | null;
};

export type ReportUpdate = {
    content?: string | null;
    read?: boolean | null;
};

export type RoleBase = {
    name: string;
    description: string;
};

export type RoleNameBase = {
    name: string;
};

export type RoleUpdate = {
    description?: string | null;
};

export type SubmissionCreate = {
    code: string;
    language: string;
    status: string;
    suggestions?: string | null;
    problemID: number;
    userID: number;
};

export type SubmissionRead = {
    code: string;
    language: string;
    status: string;
    suggestions?: string | null;
    id: number;
    timeSubmitted?: string | null;
    timeUpdated?: string | null;
};

export type SubmissionUpdate = {
    code?: string | null;
    language?: string | null;
    status?: string | null;
    suggestions?: string | null;
};

export type TestCaseCreate = {
    problemID: number;
    input: string;
    output: string;
};

export type TestCaseRead = {
    problemID: number;
    input: string;
    output: string;
    id: number;
};

export type TestCaseUpdate = {
    input?: string | null;
    output?: string | null;
};

export type UserCreate = {
    username: string;
    firstName: string;
    lastName: string;
    email: string;
    active?: boolean;
    score?: number | null;
    password: string;
    roles: Array<string>;
};

export type UserPublic = {
    id: number;
    username: string;
    firstName: string;
    lastName: string;
    email: string;
    isVerified: boolean;
    score: number;
    bio?: string | null;
    github?: string | null;
    skills?: string | null;
    profilePicture?: string | null;
    roles: Array<RoleNameBase>;
};

export type UserRegister = {
    firstName: string;
    lastName: string;
    email: string;
    username: string;
    password: string;
};

export type UserUpdate = {
    firstName?: string | null;
    lastName?: string | null;
    email?: string | null;
    bio?: string | null;
    github?: string | null;
    profilePicture?: string | null;
    skills?: string | null;
};

export type UsersPublic = {
    total: number;
    users: Array<UserPublic>;
};

export type ValidationError = {
    loc: Array<string | number>;
    msg: string;
    type: string;
};

export type GetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/';
};

export type GetErrors = {
    /**
     * Not Found
     */
    404: ErrorResponse;
};

export type GetError = GetErrors[keyof GetErrors];

export type GetResponses = {
    /**
     * Successful Response
     */
    200: Message;
};

export type GetResponse = GetResponses[keyof GetResponses];

export type GetOpenapiJsonData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/openapi.json';
};

export type GetOpenapiJsonErrors = {
    /**
     * Not Found
     */
    404: ErrorResponse;
};

export type GetOpenapiJsonError = GetOpenapiJsonErrors[keyof GetOpenapiJsonErrors];

export type GetOpenapiJsonResponses = {
    /**
     * Successful Response
     */
    200: {
        [key: string]: unknown;
    };
};

export type GetOpenapiJsonResponse = GetOpenapiJsonResponses[keyof GetOpenapiJsonResponses];

export type PostAuthAccessTokenData = {
    body: BodyAuthLoginForAccessToken;
    path?: never;
    query?: never;
    url: '/auth/access-token';
};

export type PostAuthAccessTokenErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type PostAuthAccessTokenError = PostAuthAccessTokenErrors[keyof PostAuthAccessTokenErrors];

export type PostAuthAccessTokenResponses = {
    /**
     * Successful Response
     */
    200: AccessToken;
};

export type PostAuthAccessTokenResponse = PostAuthAccessTokenResponses[keyof PostAuthAccessTokenResponses];

export type PostAuthRegisterData = {
    body: UserRegister;
    path?: never;
    query?: never;
    url: '/auth/register';
};

export type PostAuthRegisterErrors = {
    /**
     * Nombre de usuario ya existente
     */
    400: ErrorResponse;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type PostAuthRegisterError = PostAuthRegisterErrors[keyof PostAuthRegisterErrors];

export type PostAuthRegisterResponses = {
    /**
     * Usuario registrado
     */
    200: UserPublic;
};

export type PostAuthRegisterResponse = PostAuthRegisterResponses[keyof PostAuthRegisterResponses];

export type PostAuthPasswordRecoveryData = {
    body?: never;
    path?: never;
    query: {
        email: string;
    };
    url: '/auth/password-recovery';
};

export type PostAuthPasswordRecoveryErrors = {
    /**
     * El usuario no existe o el correo electronico no es valido.
     */
    400: ErrorResponse;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type PostAuthPasswordRecoveryError = PostAuthPasswordRecoveryErrors[keyof PostAuthPasswordRecoveryErrors];

export type PostAuthPasswordRecoveryResponses = {
    /**
     * Se ha enviado un correo electronico con el token de recuperacion.
     */
    200: Message;
};

export type PostAuthPasswordRecoveryResponse = PostAuthPasswordRecoveryResponses[keyof PostAuthPasswordRecoveryResponses];

export type PostAuthPasswordResetData = {
    body?: never;
    path?: never;
    query: {
        token: string;
        new_password: string;
    };
    url: '/auth/password-reset';
};

export type PostAuthPasswordResetErrors = {
    /**
     * El token es invalido o ha caducado.
     */
    400: ErrorResponse;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type PostAuthPasswordResetError = PostAuthPasswordResetErrors[keyof PostAuthPasswordResetErrors];

export type PostAuthPasswordResetResponses = {
    /**
     * Se ha actualizado la contraseña.
     */
    200: Message;
};

export type PostAuthPasswordResetResponse = PostAuthPasswordResetResponses[keyof PostAuthPasswordResetResponses];

export type PostAuthVerifyRegisterTokenData = {
    body?: never;
    path?: never;
    query: {
        email: string;
    };
    url: '/auth/verify-register-token';
};

export type PostAuthVerifyRegisterTokenErrors = {
    /**
     * El usuario no existe o el correo electronico no es valido.
     */
    400: ErrorResponse;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type PostAuthVerifyRegisterTokenError = PostAuthVerifyRegisterTokenErrors[keyof PostAuthVerifyRegisterTokenErrors];

export type PostAuthVerifyRegisterTokenResponses = {
    /**
     * Se ha enviado un correo electronico con el token de verificacion.
     */
    200: Message;
};

export type PostAuthVerifyRegisterTokenResponse = PostAuthVerifyRegisterTokenResponses[keyof PostAuthVerifyRegisterTokenResponses];

export type PostAuthVerifyAccountData = {
    body?: never;
    path?: never;
    query: {
        token: string;
    };
    url: '/auth/verify-account';
};

export type PostAuthVerifyAccountErrors = {
    /**
     * El token es invalido o ha caducado.
     */
    400: ErrorResponse;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type PostAuthVerifyAccountError = PostAuthVerifyAccountErrors[keyof PostAuthVerifyAccountErrors];

export type PostAuthVerifyAccountResponses = {
    /**
     * Se ha activado la cuenta.
     */
    200: Message;
};

export type PostAuthVerifyAccountResponse = PostAuthVerifyAccountResponses[keyof PostAuthVerifyAccountResponses];

export type GetUsersData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/users/';
};

export type GetUsersErrors = {
    /**
     * No autorizado
     */
    401: ErrorResponse;
    /**
     * No tiene permisos para realizar esta acción
     */
    403: ErrorResponse;
    /**
     * No se encontraron usuarios
     */
    404: ErrorResponse;
};

export type GetUsersError = GetUsersErrors[keyof GetUsersErrors];

export type GetUsersResponses = {
    /**
     * Lista de usuarios obtenida
     */
    200: UsersPublic;
};

export type GetUsersResponse = GetUsersResponses[keyof GetUsersResponses];

export type PostUsersData = {
    body: UserCreate;
    path?: never;
    query?: never;
    url: '/users/';
};

export type PostUsersErrors = {
    /**
     * Nombre de usuario ya existente
     */
    400: ErrorResponse;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type PostUsersError = PostUsersErrors[keyof PostUsersErrors];

export type PostUsersResponses = {
    /**
     * Usuario creado
     */
    200: UserCreate;
};

export type PostUsersResponse = PostUsersResponses[keyof PostUsersResponses];

export type DeleteUsersMeData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/users/me';
};

export type DeleteUsersMeErrors = {
    /**
     * No autorizado
     */
    403: ErrorResponse;
};

export type DeleteUsersMeError = DeleteUsersMeErrors[keyof DeleteUsersMeErrors];

export type DeleteUsersMeResponses = {
    /**
     * Usuario eliminado
     */
    200: UserPublic;
};

export type DeleteUsersMeResponse = DeleteUsersMeResponses[keyof DeleteUsersMeResponses];

export type GetUsersMeData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/users/me';
};

export type GetUsersMeErrors = {
    /**
     * No autorizado
     */
    403: ErrorResponse;
};

export type GetUsersMeError = GetUsersMeErrors[keyof GetUsersMeErrors];

export type GetUsersMeResponses = {
    /**
     * Usuario actual obtenido
     */
    200: UserPublic;
};

export type GetUsersMeResponse = GetUsersMeResponses[keyof GetUsersMeResponses];

export type PatchUsersMeData = {
    body: UserUpdate;
    path?: never;
    query?: never;
    url: '/users/me';
};

export type PatchUsersMeErrors = {
    /**
     * No autorizado
     */
    403: ErrorResponse;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type PatchUsersMeError = PatchUsersMeErrors[keyof PatchUsersMeErrors];

export type PatchUsersMeResponses = {
    /**
     * Usuario actualizado
     */
    200: UserUpdate;
};

export type PatchUsersMeResponse = PatchUsersMeResponses[keyof PatchUsersMeResponses];

export type GetUsersIdByUserIdData = {
    body?: never;
    path: {
        user_id: number;
    };
    query?: never;
    url: '/users/id:{user_id}';
};

export type GetUsersIdByUserIdErrors = {
    /**
     * Usuario no encontrado
     */
    404: ErrorResponse;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetUsersIdByUserIdError = GetUsersIdByUserIdErrors[keyof GetUsersIdByUserIdErrors];

export type GetUsersIdByUserIdResponses = {
    /**
     * Usuario encontrado
     */
    200: UserPublic;
};

export type GetUsersIdByUserIdResponse = GetUsersIdByUserIdResponses[keyof GetUsersIdByUserIdResponses];

export type GetUsersByUsernameData = {
    body?: never;
    path: {
        username: string;
    };
    query?: never;
    url: '/users/{username}';
};

export type GetUsersByUsernameErrors = {
    /**
     * Usuario no encontrado
     */
    404: ErrorResponse;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetUsersByUsernameError = GetUsersByUsernameErrors[keyof GetUsersByUsernameErrors];

export type GetUsersByUsernameResponses = {
    /**
     * Usuario encontrado
     */
    200: UserPublic;
};

export type GetUsersByUsernameResponse = GetUsersByUsernameResponses[keyof GetUsersByUsernameResponses];

export type DeleteUsersByUserIdData = {
    body?: never;
    path: {
        user_id: number;
    };
    query?: never;
    url: '/users/{user_id}';
};

export type DeleteUsersByUserIdErrors = {
    /**
     * Usuario no encontrado
     */
    404: ErrorResponse;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteUsersByUserIdError = DeleteUsersByUserIdErrors[keyof DeleteUsersByUserIdErrors];

export type DeleteUsersByUserIdResponses = {
    /**
     * Usuario eliminado
     */
    200: UserPublic;
};

export type DeleteUsersByUserIdResponse = DeleteUsersByUserIdResponses[keyof DeleteUsersByUserIdResponses];

export type PatchUsersByUserIdData = {
    body: UserUpdate;
    path: {
        user_id: number;
    };
    query?: never;
    url: '/users/{user_id}';
};

export type PatchUsersByUserIdErrors = {
    /**
     * Usuario no encontrado
     */
    404: ErrorResponse;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type PatchUsersByUserIdError = PatchUsersByUserIdErrors[keyof PatchUsersByUserIdErrors];

export type PatchUsersByUserIdResponses = {
    /**
     * Usuario actualizado
     */
    200: UserUpdate;
};

export type PatchUsersByUserIdResponse = PatchUsersByUserIdResponses[keyof PatchUsersByUserIdResponses];

export type GetSubmissionsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/submissions/';
};

export type GetSubmissionsErrors = {
    /**
     * No se encontraron entregas
     */
    400: ErrorResponse;
};

export type GetSubmissionsError = GetSubmissionsErrors[keyof GetSubmissionsErrors];

export type GetSubmissionsResponses = {
    /**
     * Lista de entregas obtenida
     */
    200: Array<SubmissionRead>;
};

export type GetSubmissionsResponse = GetSubmissionsResponses[keyof GetSubmissionsResponses];

export type PostSubmissionsData = {
    body: SubmissionCreate;
    path?: never;
    query?: never;
    url: '/submissions/';
};

export type PostSubmissionsErrors = {
    /**
     * Error en los datos enviados
     */
    400: ErrorResponse;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type PostSubmissionsError = PostSubmissionsErrors[keyof PostSubmissionsErrors];

export type PostSubmissionsResponses = {
    /**
     * Entrega creada
     */
    200: SubmissionCreate;
};

export type PostSubmissionsResponse = PostSubmissionsResponses[keyof PostSubmissionsResponses];

export type GetSubmissionsUserByUserIdData = {
    body?: never;
    path: {
        user_id: number;
    };
    query?: never;
    url: '/submissions/user/{user_id}';
};

export type GetSubmissionsUserByUserIdErrors = {
    /**
     * No se puede acceder a las entregas de otro usuario
     */
    403: ErrorResponse;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetSubmissionsUserByUserIdError = GetSubmissionsUserByUserIdErrors[keyof GetSubmissionsUserByUserIdErrors];

export type GetSubmissionsUserByUserIdResponses = {
    /**
     * Lista de entregas obtenida
     */
    200: Array<SubmissionRead>;
};

export type GetSubmissionsUserByUserIdResponse = GetSubmissionsUserByUserIdResponses[keyof GetSubmissionsUserByUserIdResponses];

export type GetSubmissionsBySubmissionIdData = {
    body?: never;
    path: {
        submission_id: number;
    };
    query?: never;
    url: '/submissions/{submission_id}';
};

export type GetSubmissionsBySubmissionIdErrors = {
    /**
     * No tienes permiso para acceder a este recurso
     */
    403: ErrorResponse;
    /**
     * Entrega no encontrada
     */
    404: ErrorResponse;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetSubmissionsBySubmissionIdError = GetSubmissionsBySubmissionIdErrors[keyof GetSubmissionsBySubmissionIdErrors];

export type GetSubmissionsBySubmissionIdResponses = {
    /**
     * Entrega encontrada
     */
    200: SubmissionRead;
};

export type GetSubmissionsBySubmissionIdResponse = GetSubmissionsBySubmissionIdResponses[keyof GetSubmissionsBySubmissionIdResponses];

export type PatchSubmissionsBySubmissionIdData = {
    body: SubmissionUpdate;
    path: {
        submission_id: number;
    };
    query?: never;
    url: '/submissions/{submission_id}';
};

export type PatchSubmissionsBySubmissionIdErrors = {
    /**
     * Entrega no encontrada
     */
    404: ErrorResponse;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type PatchSubmissionsBySubmissionIdError = PatchSubmissionsBySubmissionIdErrors[keyof PatchSubmissionsBySubmissionIdErrors];

export type PatchSubmissionsBySubmissionIdResponses = {
    /**
     * Entrega actualizada
     */
    200: SubmissionUpdate;
};

export type PatchSubmissionsBySubmissionIdResponse = PatchSubmissionsBySubmissionIdResponses[keyof PatchSubmissionsBySubmissionIdResponses];

export type GetProblemsData = {
    body?: never;
    path?: never;
    query?: {
        skip?: number;
        limit?: number;
    };
    url: '/problems/';
};

export type GetProblemsErrors = {
    /**
     * No se encontraron problemas
     */
    404: ErrorResponse;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetProblemsError = GetProblemsErrors[keyof GetProblemsErrors];

export type GetProblemsResponses = {
    /**
     * Lista de problemas obtenida
     */
    200: Array<ProblemRead>;
};

export type GetProblemsResponse = GetProblemsResponses[keyof GetProblemsResponses];

export type PostProblemsData = {
    body: ProblemCreate;
    path?: never;
    query?: never;
    url: '/problems/';
};

export type PostProblemsErrors = {
    /**
     * Problema no creado
     */
    404: ErrorResponse;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type PostProblemsError = PostProblemsErrors[keyof PostProblemsErrors];

export type PostProblemsResponses = {
    /**
     * Problema creado
     */
    200: ProblemCreate;
};

export type PostProblemsResponse = PostProblemsResponses[keyof PostProblemsResponses];

export type GetProblemsIdByProblemIdData = {
    body?: never;
    path: {
        problem_id: number;
    };
    query?: never;
    url: '/problems/id:{problem_id}';
};

export type GetProblemsIdByProblemIdErrors = {
    /**
     * Problema no encontrado
     */
    404: ErrorResponse;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetProblemsIdByProblemIdError = GetProblemsIdByProblemIdErrors[keyof GetProblemsIdByProblemIdErrors];

export type GetProblemsIdByProblemIdResponses = {
    /**
     * Problema encontrado
     */
    200: ProblemRead;
};

export type GetProblemsIdByProblemIdResponse = GetProblemsIdByProblemIdResponses[keyof GetProblemsIdByProblemIdResponses];

export type GetProblemsBlockByBlockData = {
    body?: never;
    path: {
        block: string;
    };
    query?: never;
    url: '/problems/block/{block}';
};

export type GetProblemsBlockByBlockErrors = {
    /**
     * No se encontraron problemas o no existe el bloque solicitado.
     */
    404: ErrorResponse;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetProblemsBlockByBlockError = GetProblemsBlockByBlockErrors[keyof GetProblemsBlockByBlockErrors];

export type GetProblemsBlockByBlockResponses = {
    /**
     * Lista de problemas obtenida
     */
    200: Array<ProblemRead>;
};

export type GetProblemsBlockByBlockResponse = GetProblemsBlockByBlockResponses[keyof GetProblemsBlockByBlockResponses];

export type GetProblemsProblemBlocksData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/problems/problem-blocks';
};

export type GetProblemsProblemBlocksErrors = {
    /**
     * No se encontraron bloques de problemas
     */
    404: ErrorResponse;
};

export type GetProblemsProblemBlocksError = GetProblemsProblemBlocksErrors[keyof GetProblemsProblemBlocksErrors];

export type GetProblemsProblemBlocksResponses = {
    /**
     * Lista de bloques obtenida
     */
    200: Array<string>;
};

export type GetProblemsProblemBlocksResponse = GetProblemsProblemBlocksResponses[keyof GetProblemsProblemBlocksResponses];

export type GetProblemsDifficultyByDifficultyData = {
    body?: never;
    path: {
        difficulty: string;
    };
    query?: never;
    url: '/problems/difficulty/{difficulty}';
};

export type GetProblemsDifficultyByDifficultyErrors = {
    /**
     * No se encontraron problemas con la dificultad especificada
     */
    404: ErrorResponse;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetProblemsDifficultyByDifficultyError = GetProblemsDifficultyByDifficultyErrors[keyof GetProblemsDifficultyByDifficultyErrors];

export type GetProblemsDifficultyByDifficultyResponses = {
    /**
     * Lista de problemas obtenida
     */
    200: Array<ProblemRead>;
};

export type GetProblemsDifficultyByDifficultyResponse = GetProblemsDifficultyByDifficultyResponses[keyof GetProblemsDifficultyByDifficultyResponses];

export type DeleteProblemsByProblemIdData = {
    body?: never;
    path: {
        problem_id: number;
    };
    query?: never;
    url: '/problems/{problem_id}';
};

export type DeleteProblemsByProblemIdErrors = {
    /**
     * Problema no encontrado
     */
    404: ErrorResponse;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteProblemsByProblemIdError = DeleteProblemsByProblemIdErrors[keyof DeleteProblemsByProblemIdErrors];

export type DeleteProblemsByProblemIdResponses = {
    /**
     * Problema eliminado
     */
    200: ProblemRead;
};

export type DeleteProblemsByProblemIdResponse = DeleteProblemsByProblemIdResponses[keyof DeleteProblemsByProblemIdResponses];

export type PatchProblemsByProblemIdData = {
    body: ProblemUpdate;
    path: {
        problem_id: number;
    };
    query?: never;
    url: '/problems/{problem_id}';
};

export type PatchProblemsByProblemIdErrors = {
    /**
     * Problema no encontrado
     */
    404: ErrorResponse;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type PatchProblemsByProblemIdError = PatchProblemsByProblemIdErrors[keyof PatchProblemsByProblemIdErrors];

export type PatchProblemsByProblemIdResponses = {
    /**
     * Problema actualizado
     */
    200: ProblemUpdate;
};

export type PatchProblemsByProblemIdResponse = PatchProblemsByProblemIdResponses[keyof PatchProblemsByProblemIdResponses];

export type GetRolesData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/roles/';
};

export type GetRolesErrors = {
    /**
     * No se encontraron roles
     */
    404: ErrorResponse;
};

export type GetRolesError = GetRolesErrors[keyof GetRolesErrors];

export type GetRolesResponses = {
    /**
     * Lista de roles obtenida
     */
    200: Array<RoleBase>;
};

export type GetRolesResponse = GetRolesResponses[keyof GetRolesResponses];

export type PostRolesData = {
    body: RoleBase;
    path?: never;
    query?: never;
    url: '/roles/';
};

export type PostRolesErrors = {
    /**
     * Error en los datos enviados
     */
    400: ErrorResponse;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type PostRolesError = PostRolesErrors[keyof PostRolesErrors];

export type PostRolesResponses = {
    /**
     * Rol creado
     */
    200: RoleBase;
};

export type PostRolesResponse = PostRolesResponses[keyof PostRolesResponses];

export type DeleteRolesByRoleNameData = {
    body?: never;
    path: {
        role_name: string;
    };
    query?: never;
    url: '/roles/{role_name}';
};

export type DeleteRolesByRoleNameErrors = {
    /**
     * Rol no encontrado
     */
    404: ErrorResponse;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteRolesByRoleNameError = DeleteRolesByRoleNameErrors[keyof DeleteRolesByRoleNameErrors];

export type DeleteRolesByRoleNameResponses = {
    /**
     * Rol eliminado
     */
    200: RoleBase;
};

export type DeleteRolesByRoleNameResponse = DeleteRolesByRoleNameResponses[keyof DeleteRolesByRoleNameResponses];

export type GetRolesByRoleNameData = {
    body?: never;
    path: {
        role_name: string;
    };
    query?: never;
    url: '/roles/{role_name}';
};

export type GetRolesByRoleNameErrors = {
    /**
     * Rol no encontrado
     */
    404: ErrorResponse;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetRolesByRoleNameError = GetRolesByRoleNameErrors[keyof GetRolesByRoleNameErrors];

export type GetRolesByRoleNameResponses = {
    /**
     * Rol encontrado
     */
    200: RoleBase;
};

export type GetRolesByRoleNameResponse = GetRolesByRoleNameResponses[keyof GetRolesByRoleNameResponses];

export type PatchRolesByRoleNameData = {
    body: RoleUpdate;
    path: {
        role_name: string;
    };
    query?: never;
    url: '/roles/{role_name}';
};

export type PatchRolesByRoleNameErrors = {
    /**
     * Rol no encontrado
     */
    404: ErrorResponse;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type PatchRolesByRoleNameError = PatchRolesByRoleNameErrors[keyof PatchRolesByRoleNameErrors];

export type PatchRolesByRoleNameResponses = {
    /**
     * Rol actualizado
     */
    200: RoleUpdate;
};

export type PatchRolesByRoleNameResponse = PatchRolesByRoleNameResponses[keyof PatchRolesByRoleNameResponses];

export type PostRolesByRoleNameAssignByUserIdData = {
    body?: never;
    path: {
        role_name: string;
        user_id: number;
    };
    query?: never;
    url: '/roles/{role_name}/assign/{user_id}';
};

export type PostRolesByRoleNameAssignByUserIdErrors = {
    /**
     * El usuario ya tiene asignado el rol
     */
    400: ErrorResponse;
    /**
     * Usuario no encontrado
     */
    404: ErrorResponse;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type PostRolesByRoleNameAssignByUserIdError = PostRolesByRoleNameAssignByUserIdErrors[keyof PostRolesByRoleNameAssignByUserIdErrors];

export type PostRolesByRoleNameAssignByUserIdResponses = {
    /**
     * Rol asignado
     */
    200: UserPublic;
};

export type PostRolesByRoleNameAssignByUserIdResponse = PostRolesByRoleNameAssignByUserIdResponses[keyof PostRolesByRoleNameAssignByUserIdResponses];

export type PostRolesByRoleNameRevokeByUserIdData = {
    body?: never;
    path: {
        role_name: string;
        user_id: number;
    };
    query?: never;
    url: '/roles/{role_name}/revoke/{user_id}';
};

export type PostRolesByRoleNameRevokeByUserIdErrors = {
    /**
     * El usuario no tiene asignado el rol
     */
    400: ErrorResponse;
    /**
     * Usuario no encontrado
     */
    404: ErrorResponse;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type PostRolesByRoleNameRevokeByUserIdError = PostRolesByRoleNameRevokeByUserIdErrors[keyof PostRolesByRoleNameRevokeByUserIdErrors];

export type PostRolesByRoleNameRevokeByUserIdResponses = {
    /**
     * Rol revocado
     */
    200: UserPublic;
};

export type PostRolesByRoleNameRevokeByUserIdResponse = PostRolesByRoleNameRevokeByUserIdResponses[keyof PostRolesByRoleNameRevokeByUserIdResponses];

export type GetRolesUserByUserIdData = {
    body?: never;
    path: {
        user_id: number;
    };
    query?: never;
    url: '/roles/user/{user_id}';
};

export type GetRolesUserByUserIdErrors = {
    /**
     * Usuario no encontrado
     */
    404: ErrorResponse;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetRolesUserByUserIdError = GetRolesUserByUserIdErrors[keyof GetRolesUserByUserIdErrors];

export type GetRolesUserByUserIdResponses = {
    /**
     * Lista de roles obtenida
     */
    200: Array<UserPublic>;
};

export type GetRolesUserByUserIdResponse = GetRolesUserByUserIdResponses[keyof GetRolesUserByUserIdResponses];

export type GetRolesByRoleNameUsersData = {
    body?: never;
    path: {
        role_name: string;
    };
    query?: never;
    url: '/roles/{role_name}/users';
};

export type GetRolesByRoleNameUsersErrors = {
    /**
     * Rol no encontrado
     */
    404: ErrorResponse;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetRolesByRoleNameUsersError = GetRolesByRoleNameUsersErrors[keyof GetRolesByRoleNameUsersErrors];

export type GetRolesByRoleNameUsersResponses = {
    /**
     * Lista de usuarios obtenida
     */
    200: Array<UserPublic>;
};

export type GetRolesByRoleNameUsersResponse = GetRolesByRoleNameUsersResponses[keyof GetRolesByRoleNameUsersResponses];

export type GetCommentsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/comments/';
};

export type GetCommentsErrors = {
    /**
     * No se encontraron comentarios
     */
    404: ErrorResponse;
};

export type GetCommentsError = GetCommentsErrors[keyof GetCommentsErrors];

export type GetCommentsResponses = {
    /**
     * Lista de comentarios obtenida
     */
    200: Array<CommentRead>;
};

export type GetCommentsResponse = GetCommentsResponses[keyof GetCommentsResponses];

export type PostCommentsData = {
    body: CommentCreate;
    path?: never;
    query?: never;
    url: '/comments/';
};

export type PostCommentsErrors = {
    /**
     * No se pudo crear el comentario
     */
    404: ErrorResponse;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type PostCommentsError = PostCommentsErrors[keyof PostCommentsErrors];

export type PostCommentsResponses = {
    /**
     * Comentario creado
     */
    200: CommentRead;
};

export type PostCommentsResponse = PostCommentsResponses[keyof PostCommentsResponses];

export type DeleteCommentsByCommentIdData = {
    body?: never;
    path: {
        comment_id: number;
    };
    query?: never;
    url: '/comments/{comment_id}';
};

export type DeleteCommentsByCommentIdErrors = {
    /**
     * El usuario no tiene permisos para acceder a este recurso
     */
    403: ErrorResponse;
    /**
     * Comentario no encontrado
     */
    404: ErrorResponse;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteCommentsByCommentIdError = DeleteCommentsByCommentIdErrors[keyof DeleteCommentsByCommentIdErrors];

export type DeleteCommentsByCommentIdResponses = {
    /**
     * Comentario eliminado
     */
    200: CommentRead;
};

export type DeleteCommentsByCommentIdResponse = DeleteCommentsByCommentIdResponses[keyof DeleteCommentsByCommentIdResponses];

export type GetCommentsByCommentIdData = {
    body?: never;
    path: {
        comment_id: number;
    };
    query?: never;
    url: '/comments/{comment_id}';
};

export type GetCommentsByCommentIdErrors = {
    /**
     * El comentario no existe
     */
    404: ErrorResponse;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetCommentsByCommentIdError = GetCommentsByCommentIdErrors[keyof GetCommentsByCommentIdErrors];

export type GetCommentsByCommentIdResponses = {
    /**
     * Comentario encontrado
     */
    200: CommentRead;
};

export type GetCommentsByCommentIdResponse = GetCommentsByCommentIdResponses[keyof GetCommentsByCommentIdResponses];

export type PatchCommentsByCommentIdData = {
    body: CommentUpdate;
    path: {
        comment_id: number;
    };
    query?: never;
    url: '/comments/{comment_id}';
};

export type PatchCommentsByCommentIdErrors = {
    /**
     * Comentario no encontrado
     */
    404: ErrorResponse;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type PatchCommentsByCommentIdError = PatchCommentsByCommentIdErrors[keyof PatchCommentsByCommentIdErrors];

export type PatchCommentsByCommentIdResponses = {
    /**
     * Comentario actualizado
     */
    200: CommentRead;
};

export type PatchCommentsByCommentIdResponse = PatchCommentsByCommentIdResponses[keyof PatchCommentsByCommentIdResponses];

export type GetCommentsUserByUserIdData = {
    body?: never;
    path: {
        user_id: number;
    };
    query?: never;
    url: '/comments/user/{user_id}';
};

export type GetCommentsUserByUserIdErrors = {
    /**
     * No se encontraron comentarios
     */
    404: ErrorResponse;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetCommentsUserByUserIdError = GetCommentsUserByUserIdErrors[keyof GetCommentsUserByUserIdErrors];

export type GetCommentsUserByUserIdResponses = {
    /**
     * Lista de comentarios obtenida
     */
    200: Array<CommentRead>;
};

export type GetCommentsUserByUserIdResponse = GetCommentsUserByUserIdResponses[keyof GetCommentsUserByUserIdResponses];

export type GetNotificationsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/notifications/';
};

export type GetNotificationsErrors = {
    /**
     * No se encontraron notificaciones
     */
    404: ErrorResponse;
};

export type GetNotificationsError = GetNotificationsErrors[keyof GetNotificationsErrors];

export type GetNotificationsResponses = {
    /**
     * Lista de notificaciones obtenida
     */
    200: NotificationsList;
};

export type GetNotificationsResponse = GetNotificationsResponses[keyof GetNotificationsResponses];

export type PostNotificationsData = {
    body: NotificationCreate;
    path?: never;
    query?: never;
    url: '/notifications/';
};

export type PostNotificationsErrors = {
    /**
     * Error al crear la notificación
     */
    404: ErrorResponse;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type PostNotificationsError = PostNotificationsErrors[keyof PostNotificationsErrors];

export type PostNotificationsResponses = {
    /**
     * Notificación creada
     */
    200: NotificationRead;
};

export type PostNotificationsResponse = PostNotificationsResponses[keyof PostNotificationsResponses];

export type DeleteNotificationsByNotificationIdData = {
    body?: never;
    path: {
        notification_id: number;
    };
    query?: never;
    url: '/notifications/{notification_id}';
};

export type DeleteNotificationsByNotificationIdErrors = {
    /**
     * Notificación no encontrada
     */
    404: ErrorResponse;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteNotificationsByNotificationIdError = DeleteNotificationsByNotificationIdErrors[keyof DeleteNotificationsByNotificationIdErrors];

export type DeleteNotificationsByNotificationIdResponses = {
    /**
     * Notificación eliminada
     */
    200: NotificationRead;
};

export type DeleteNotificationsByNotificationIdResponse = DeleteNotificationsByNotificationIdResponses[keyof DeleteNotificationsByNotificationIdResponses];

export type GetNotificationsByNotificationIdData = {
    body?: never;
    path: {
        notification_id: number;
    };
    query?: never;
    url: '/notifications/{notification_id}';
};

export type GetNotificationsByNotificationIdErrors = {
    /**
     * Notificación no encontrada
     */
    404: ErrorResponse;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetNotificationsByNotificationIdError = GetNotificationsByNotificationIdErrors[keyof GetNotificationsByNotificationIdErrors];

export type GetNotificationsByNotificationIdResponses = {
    /**
     * Notificación encontrada
     */
    200: NotificationRead;
};

export type GetNotificationsByNotificationIdResponse = GetNotificationsByNotificationIdResponses[keyof GetNotificationsByNotificationIdResponses];

export type PatchNotificationsByNotificationIdData = {
    body?: never;
    path: {
        notification_id: number;
    };
    query?: never;
    url: '/notifications/{notification_id}';
};

export type PatchNotificationsByNotificationIdErrors = {
    /**
     * Notificación no encontrada
     */
    404: ErrorResponse;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type PatchNotificationsByNotificationIdError = PatchNotificationsByNotificationIdErrors[keyof PatchNotificationsByNotificationIdErrors];

export type PatchNotificationsByNotificationIdResponses = {
    /**
     * Notificación actualizada
     */
    200: NotificationRead;
};

export type PatchNotificationsByNotificationIdResponse = PatchNotificationsByNotificationIdResponses[keyof PatchNotificationsByNotificationIdResponses];

export type GetNotificationsUserMeData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/notifications/user/me';
};

export type GetNotificationsUserMeErrors = {
    /**
     * No se encontraron notificaciones
     */
    404: ErrorResponse;
};

export type GetNotificationsUserMeError = GetNotificationsUserMeErrors[keyof GetNotificationsUserMeErrors];

export type GetNotificationsUserMeResponses = {
    /**
     * Lista de notificaciones obtenida
     */
    200: NotificationsList;
};

export type GetNotificationsUserMeResponse = GetNotificationsUserMeResponses[keyof GetNotificationsUserMeResponses];

export type GetNotificationsUserByUserIdData = {
    body?: never;
    path: {
        user_id: number;
    };
    query?: never;
    url: '/notifications/user/{user_id}';
};

export type GetNotificationsUserByUserIdErrors = {
    /**
     * No se encontraron notificaciones
     */
    404: ErrorResponse;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetNotificationsUserByUserIdError = GetNotificationsUserByUserIdErrors[keyof GetNotificationsUserByUserIdErrors];

export type GetNotificationsUserByUserIdResponses = {
    /**
     * Lista de notificaciones obtenida
     */
    200: Array<NotificationRead>;
};

export type GetNotificationsUserByUserIdResponse = GetNotificationsUserByUserIdResponses[keyof GetNotificationsUserByUserIdResponses];

export type GetReportsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/reports/';
};

export type GetReportsErrors = {
    /**
     * No se encontraron reportes
     */
    404: ErrorResponse;
};

export type GetReportsError = GetReportsErrors[keyof GetReportsErrors];

export type GetReportsResponses = {
    /**
     * Listado de reportes
     */
    200: Array<ReportRead>;
};

export type GetReportsResponse = GetReportsResponses[keyof GetReportsResponses];

export type PostReportsData = {
    body: ReportCreate;
    path?: never;
    query?: never;
    url: '/reports/';
};

export type PostReportsErrors = {
    /**
     * Error en los datos enviados
     */
    400: ErrorResponse;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type PostReportsError = PostReportsErrors[keyof PostReportsErrors];

export type PostReportsResponses = {
    /**
     * Reporte creado
     */
    200: ReportRead;
};

export type PostReportsResponse = PostReportsResponses[keyof PostReportsResponses];

export type GetReportsProblemByProblemIdData = {
    body?: never;
    path: {
        problem_id: number;
    };
    query?: never;
    url: '/reports/problem/{problem_id}';
};

export type GetReportsProblemByProblemIdErrors = {
    /**
     * No se encontraron reportes
     */
    404: ErrorResponse;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetReportsProblemByProblemIdError = GetReportsProblemByProblemIdErrors[keyof GetReportsProblemByProblemIdErrors];

export type GetReportsProblemByProblemIdResponses = {
    /**
     * Listado de reportes
     */
    200: Array<ReportRead>;
};

export type GetReportsProblemByProblemIdResponse = GetReportsProblemByProblemIdResponses[keyof GetReportsProblemByProblemIdResponses];

export type DeleteReportsByReportIdData = {
    body?: never;
    path: {
        report_id: number;
    };
    query?: never;
    url: '/reports/{report_id}';
};

export type DeleteReportsByReportIdErrors = {
    /**
     * Reporte no encontrado
     */
    404: ErrorResponse;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteReportsByReportIdError = DeleteReportsByReportIdErrors[keyof DeleteReportsByReportIdErrors];

export type DeleteReportsByReportIdResponses = {
    /**
     * Reporte eliminado
     */
    200: ReportRead;
};

export type DeleteReportsByReportIdResponse = DeleteReportsByReportIdResponses[keyof DeleteReportsByReportIdResponses];

export type PatchReportsByReportIdData = {
    body?: never;
    path: {
        report_id: number;
    };
    query?: never;
    url: '/reports/{report_id}';
};

export type PatchReportsByReportIdErrors = {
    /**
     * Reporte no encontrado
     */
    404: ErrorResponse;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type PatchReportsByReportIdError = PatchReportsByReportIdErrors[keyof PatchReportsByReportIdErrors];

export type PatchReportsByReportIdResponses = {
    /**
     * Reporte actualizado
     */
    200: ReportRead;
};

export type PatchReportsByReportIdResponse = PatchReportsByReportIdResponses[keyof PatchReportsByReportIdResponses];

export type GetTestCasesData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/testCases/';
};

export type GetTestCasesErrors = {
    /**
     * No se encontraron casos de prueba
     */
    400: ErrorResponse;
};

export type GetTestCasesError = GetTestCasesErrors[keyof GetTestCasesErrors];

export type GetTestCasesResponses = {
    /**
     * Lista de casos de prueba obtenida
     */
    200: Array<TestCaseRead>;
};

export type GetTestCasesResponse = GetTestCasesResponses[keyof GetTestCasesResponses];

export type PostTestCasesData = {
    body: TestCaseCreate;
    path?: never;
    query?: never;
    url: '/testCases/';
};

export type PostTestCasesErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type PostTestCasesError = PostTestCasesErrors[keyof PostTestCasesErrors];

export type PostTestCasesResponses = {
    /**
     * Caso de prueba creado
     */
    200: TestCaseRead;
};

export type PostTestCasesResponse = PostTestCasesResponses[keyof PostTestCasesResponses];

export type DeleteTestCasesByTestCaseIdData = {
    body?: never;
    path?: never;
    query: {
        test_case_id: number;
    };
    url: '/testCases/{testCase_id}';
};

export type DeleteTestCasesByTestCaseIdErrors = {
    /**
     * Caso de prueba no encontrado
     */
    404: ErrorResponse;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteTestCasesByTestCaseIdError = DeleteTestCasesByTestCaseIdErrors[keyof DeleteTestCasesByTestCaseIdErrors];

export type DeleteTestCasesByTestCaseIdResponses = {
    /**
     * Caso de prueba eliminado
     */
    200: TestCaseRead;
};

export type DeleteTestCasesByTestCaseIdResponse = DeleteTestCasesByTestCaseIdResponses[keyof DeleteTestCasesByTestCaseIdResponses];

export type GetTestCasesByTestCaseIdData = {
    body?: never;
    path?: never;
    query: {
        test_case_id: number;
    };
    url: '/testCases/{testCase_id}';
};

export type GetTestCasesByTestCaseIdErrors = {
    /**
     * Caso de prueba no encontrado
     */
    404: ErrorResponse;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetTestCasesByTestCaseIdError = GetTestCasesByTestCaseIdErrors[keyof GetTestCasesByTestCaseIdErrors];

export type GetTestCasesByTestCaseIdResponses = {
    /**
     * Caso de prueba encontrado
     */
    200: TestCaseRead;
};

export type GetTestCasesByTestCaseIdResponse = GetTestCasesByTestCaseIdResponses[keyof GetTestCasesByTestCaseIdResponses];

export type PatchTestCasesByTestCaseIdData = {
    body: TestCaseUpdate;
    path?: never;
    query: {
        test_case_id: number;
    };
    url: '/testCases/{testCase_id}';
};

export type PatchTestCasesByTestCaseIdErrors = {
    /**
     * Caso de prueba no encontrado
     */
    404: ErrorResponse;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type PatchTestCasesByTestCaseIdError = PatchTestCasesByTestCaseIdErrors[keyof PatchTestCasesByTestCaseIdErrors];

export type PatchTestCasesByTestCaseIdResponses = {
    /**
     * Caso de prueba actualizado
     */
    200: TestCaseRead;
};

export type PatchTestCasesByTestCaseIdResponse = PatchTestCasesByTestCaseIdResponses[keyof PatchTestCasesByTestCaseIdResponses];

export type GetTestCasesProblemByProblemIdData = {
    body?: never;
    path: {
        problem_id: number;
    };
    query?: never;
    url: '/testCases/problem/{problem_id}';
};

export type GetTestCasesProblemByProblemIdErrors = {
    /**
     * No se encontraron casos de prueba o no existe el problema solicitado.
     */
    404: ErrorResponse;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetTestCasesProblemByProblemIdError = GetTestCasesProblemByProblemIdErrors[keyof GetTestCasesProblemByProblemIdErrors];

export type GetTestCasesProblemByProblemIdResponses = {
    /**
     * Lista de casos de prueba obtenida
     */
    200: Array<TestCaseRead>;
};

export type GetTestCasesProblemByProblemIdResponse = GetTestCasesProblemByProblemIdResponses[keyof GetTestCasesProblemByProblemIdResponses];

export type PostCodeData = {
    body?: never;
    path?: never;
    query: {
        code: string;
    };
    url: '/code/';
};

export type PostCodeErrors = {
    /**
     * Error al crear el código
     */
    400: ErrorResponse;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type PostCodeError = PostCodeErrors[keyof PostCodeErrors];

export type PostCodeResponses = {
    /**
     * Código creado
     */
    200: Message;
};

export type PostCodeResponse = PostCodeResponses[keyof PostCodeResponses];

export type ClientOptions = {
    baseURL: 'http://localhost:8000' | (string & {});
};