// This file is auto-generated by @hey-api/openapi-ts

export type AccessToken = {
    access_token: string;
    token_type?: string;
};

export type BodyAuthLoginForAccessToken = {
    grant_type?: string | null;
    username: string;
    password: string;
    scope?: string;
    client_id?: string | null;
    client_secret?: string | null;
};

export type CommentCreate = {
    content: string;
    problemID: number;
    userID: number;
};

export type CommentRead = {
    content: string;
    id: number;
    timePosted: string | null;
};

export type CommentUpdate = {
    content?: string | null;
};

export type ErrorResponse = {
    detail: string;
};

export type HttpValidationError = {
    detail?: Array<ValidationError>;
};

export type Message = {
    message: string;
};

export type NotificationCreate = {
    title: string;
    description: string;
    read: boolean;
    userID: number;
};

export type NotificationRead = {
    title: string;
    description: string;
    read: boolean;
    id: number;
    timePosted: string | null;
};

export type NotificationsList = {
    total: number;
    notifications: Array<NotificationRead>;
};

export type ProblemCreate = {
    title: string;
    block: string;
    description: string;
    difficulty: string;
    score: number;
};

export type ProblemRead = {
    title: string;
    block: string;
    description: string;
    difficulty: string;
    score: number;
    id: number;
    authorID: number;
};

export type ProblemUpdate = {
    title?: string | null;
    block?: string | null;
    description?: string | null;
    difficulty?: string | null;
    score?: number | null;
};

export type ReportCreate = {
    content: string;
    read: boolean;
    problemID: number;
    userID: number;
};

export type ReportRead = {
    content: string;
    read: boolean;
    problemID: number;
    userID: number;
    id: number;
    timePosted?: string | null;
};

export type ReportUpdate = {
    content?: string | null;
    read?: boolean | null;
};

export type RoleBase = {
    name: string;
    description: string;
};

export type RoleNameBase = {
    name: string;
};

export type RoleUpdate = {
    description?: string | null;
};

export type SubmissionCreate = {
    code: string;
    language: string;
    status: string;
    suggestions?: string | null;
    problemID: number;
    userID: number;
};

export type SubmissionRead = {
    code: string;
    language: string;
    status: string;
    suggestions?: string | null;
    id: number;
    timeSubmitted?: string | null;
    timeUpdated?: string | null;
};

export type SubmissionUpdate = {
    code?: string | null;
    language?: string | null;
    status?: string | null;
    suggestions?: string | null;
};

export type TestCaseCreate = {
    problemID: number;
    input: string;
    output: string;
};

export type TestCaseRead = {
    problemID: number;
    input: string;
    output: string;
    id: number;
};

export type TestCaseUpdate = {
    input?: string | null;
    output?: string | null;
};

export type UserCreate = {
    username: string;
    firstName: string;
    lastName: string;
    email: string;
    active?: boolean;
    score?: number | null;
    password: string;
    roles: Array<string>;
};

export type UserPublic = {
    id: number;
    username: string;
    firstName: string;
    lastName: string;
    email: string;
    isVerified: boolean;
    score: number;
    bio?: string | null;
    github?: string | null;
    skills?: string | null;
    profilePicture?: string | null;
    roles: Array<RoleNameBase>;
    notifications?: Array<NotificationRead>;
};

export type UserRegister = {
    firstName: string;
    lastName: string;
    email: string;
    username: string;
    password: string;
};

export type UserUpdate = {
    firstName?: string | null;
    lastName?: string | null;
    email?: string | null;
    bio?: string | null;
    github?: string | null;
    profilePicture?: string | null;
    skills?: string | null;
};

export type UsersPublic = {
    total: number;
    users: Array<UserPublic>;
};

export type ValidationError = {
    loc: Array<string | number>;
    msg: string;
    type: string;
};

export type ReadRootData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/';
};

export type ReadRootErrors = {
    /**
     * Not Found
     */
    404: ErrorResponse;
};

export type ReadRootError = ReadRootErrors[keyof ReadRootErrors];

export type ReadRootResponses = {
    /**
     * Successful Response
     */
    200: Message;
};

export type ReadRootResponse = ReadRootResponses[keyof ReadRootResponses];

export type CustomDocsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/openapi.json';
};

export type CustomDocsErrors = {
    /**
     * Not Found
     */
    404: ErrorResponse;
};

export type CustomDocsError = CustomDocsErrors[keyof CustomDocsErrors];

export type CustomDocsResponses = {
    /**
     * Successful Response
     */
    200: {
        [key: string]: unknown;
    };
};

export type CustomDocsResponse = CustomDocsResponses[keyof CustomDocsResponses];

export type LoginForAccessTokenData = {
    body: BodyAuthLoginForAccessToken;
    path?: never;
    query?: never;
    url: '/auth/access-token';
};

export type LoginForAccessTokenErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type LoginForAccessTokenError = LoginForAccessTokenErrors[keyof LoginForAccessTokenErrors];

export type LoginForAccessTokenResponses = {
    /**
     * Successful Response
     */
    200: AccessToken;
};

export type LoginForAccessTokenResponse = LoginForAccessTokenResponses[keyof LoginForAccessTokenResponses];

export type RegisterUserData = {
    body: UserRegister;
    path?: never;
    query?: never;
    url: '/auth/register';
};

export type RegisterUserErrors = {
    /**
     * Nombre de usuario ya existente
     */
    400: ErrorResponse;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type RegisterUserError = RegisterUserErrors[keyof RegisterUserErrors];

export type RegisterUserResponses = {
    /**
     * Usuario registrado
     */
    200: UserPublic;
};

export type RegisterUserResponse = RegisterUserResponses[keyof RegisterUserResponses];

export type PasswordRecoveryData = {
    body?: never;
    path?: never;
    query: {
        email: string;
    };
    url: '/auth/password-recovery';
};

export type PasswordRecoveryErrors = {
    /**
     * El usuario no existe o el correo electronico no es valido.
     */
    400: ErrorResponse;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type PasswordRecoveryError = PasswordRecoveryErrors[keyof PasswordRecoveryErrors];

export type PasswordRecoveryResponses = {
    /**
     * Se ha enviado un correo electronico con el token de recuperacion.
     */
    200: Message;
};

export type PasswordRecoveryResponse = PasswordRecoveryResponses[keyof PasswordRecoveryResponses];

export type PasswordResetData = {
    body?: never;
    path?: never;
    query: {
        token: string;
        new_password: string;
    };
    url: '/auth/password-reset';
};

export type PasswordResetErrors = {
    /**
     * El token es invalido o ha caducado.
     */
    400: ErrorResponse;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type PasswordResetError = PasswordResetErrors[keyof PasswordResetErrors];

export type PasswordResetResponses = {
    /**
     * Se ha actualizado la contraseña.
     */
    200: Message;
};

export type PasswordResetResponse = PasswordResetResponses[keyof PasswordResetResponses];

export type VerifyRegisterTokenData = {
    body?: never;
    path?: never;
    query: {
        email: string;
    };
    url: '/auth/verify-register-token';
};

export type VerifyRegisterTokenErrors = {
    /**
     * El usuario no existe o el correo electronico no es valido.
     */
    400: ErrorResponse;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type VerifyRegisterTokenError = VerifyRegisterTokenErrors[keyof VerifyRegisterTokenErrors];

export type VerifyRegisterTokenResponses = {
    /**
     * Se ha enviado un correo electronico con el token de verificacion.
     */
    200: Message;
};

export type VerifyRegisterTokenResponse = VerifyRegisterTokenResponses[keyof VerifyRegisterTokenResponses];

export type VerifyAccountData = {
    body?: never;
    path?: never;
    query: {
        token: string;
    };
    url: '/auth/verify-account';
};

export type VerifyAccountErrors = {
    /**
     * El token es invalido o ha caducado.
     */
    400: ErrorResponse;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type VerifyAccountError = VerifyAccountErrors[keyof VerifyAccountErrors];

export type VerifyAccountResponses = {
    /**
     * Se ha activado la cuenta.
     */
    200: Message;
};

export type VerifyAccountResponse = VerifyAccountResponses[keyof VerifyAccountResponses];

export type GetUsersData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/users/';
};

export type GetUsersErrors = {
    /**
     * No autorizado
     */
    401: ErrorResponse;
    /**
     * No tiene permisos para realizar esta acción
     */
    403: ErrorResponse;
    /**
     * No se encontraron usuarios
     */
    404: ErrorResponse;
};

export type GetUsersError = GetUsersErrors[keyof GetUsersErrors];

export type GetUsersResponses = {
    /**
     * Lista de usuarios obtenida
     */
    200: UsersPublic;
};

export type GetUsersResponse = GetUsersResponses[keyof GetUsersResponses];

export type CreateUserData = {
    body: UserCreate;
    path?: never;
    query?: never;
    url: '/users/';
};

export type CreateUserErrors = {
    /**
     * Nombre de usuario ya existente
     */
    400: ErrorResponse;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateUserError = CreateUserErrors[keyof CreateUserErrors];

export type CreateUserResponses = {
    /**
     * Usuario creado
     */
    200: UserCreate;
};

export type CreateUserResponse = CreateUserResponses[keyof CreateUserResponses];

export type DeleteCurrentUserData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/users/me';
};

export type DeleteCurrentUserErrors = {
    /**
     * No autorizado
     */
    403: ErrorResponse;
};

export type DeleteCurrentUserError = DeleteCurrentUserErrors[keyof DeleteCurrentUserErrors];

export type DeleteCurrentUserResponses = {
    /**
     * Usuario eliminado
     */
    200: UserPublic;
};

export type DeleteCurrentUserResponse = DeleteCurrentUserResponses[keyof DeleteCurrentUserResponses];

export type GetCurrentUserData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/users/me';
};

export type GetCurrentUserErrors = {
    /**
     * No autorizado
     */
    403: ErrorResponse;
};

export type GetCurrentUserError = GetCurrentUserErrors[keyof GetCurrentUserErrors];

export type GetCurrentUserResponses = {
    /**
     * Usuario actual obtenido
     */
    200: UserPublic;
};

export type GetCurrentUserResponse = GetCurrentUserResponses[keyof GetCurrentUserResponses];

export type UpdateCurrentUserData = {
    body: UserUpdate;
    path?: never;
    query?: never;
    url: '/users/me';
};

export type UpdateCurrentUserErrors = {
    /**
     * No autorizado
     */
    403: ErrorResponse;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UpdateCurrentUserError = UpdateCurrentUserErrors[keyof UpdateCurrentUserErrors];

export type UpdateCurrentUserResponses = {
    /**
     * Usuario actualizado
     */
    200: UserUpdate;
};

export type UpdateCurrentUserResponse = UpdateCurrentUserResponses[keyof UpdateCurrentUserResponses];

export type GetUserByIdData = {
    body?: never;
    path: {
        user_id: number;
    };
    query?: never;
    url: '/users/id:{user_id}';
};

export type GetUserByIdErrors = {
    /**
     * Usuario no encontrado
     */
    404: ErrorResponse;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetUserByIdError = GetUserByIdErrors[keyof GetUserByIdErrors];

export type GetUserByIdResponses = {
    /**
     * Usuario encontrado
     */
    200: UserPublic;
};

export type GetUserByIdResponse = GetUserByIdResponses[keyof GetUserByIdResponses];

export type GetUserByUsernameData = {
    body?: never;
    path: {
        username: string;
    };
    query?: never;
    url: '/users/{username}';
};

export type GetUserByUsernameErrors = {
    /**
     * Usuario no encontrado
     */
    404: ErrorResponse;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetUserByUsernameError = GetUserByUsernameErrors[keyof GetUserByUsernameErrors];

export type GetUserByUsernameResponses = {
    /**
     * Usuario encontrado
     */
    200: UserPublic;
};

export type GetUserByUsernameResponse = GetUserByUsernameResponses[keyof GetUserByUsernameResponses];

export type DeleteUserData = {
    body?: never;
    path: {
        user_id: number;
    };
    query?: never;
    url: '/users/{user_id}';
};

export type DeleteUserErrors = {
    /**
     * Usuario no encontrado
     */
    404: ErrorResponse;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteUserError = DeleteUserErrors[keyof DeleteUserErrors];

export type DeleteUserResponses = {
    /**
     * Usuario eliminado
     */
    200: UserPublic;
};

export type DeleteUserResponse = DeleteUserResponses[keyof DeleteUserResponses];

export type UpdateUserData = {
    body: UserUpdate;
    path: {
        user_id: number;
    };
    query?: never;
    url: '/users/{user_id}';
};

export type UpdateUserErrors = {
    /**
     * Usuario no encontrado
     */
    404: ErrorResponse;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UpdateUserError = UpdateUserErrors[keyof UpdateUserErrors];

export type UpdateUserResponses = {
    /**
     * Usuario actualizado
     */
    200: UserUpdate;
};

export type UpdateUserResponse = UpdateUserResponses[keyof UpdateUserResponses];

export type GetSubmissionsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/submissions/';
};

export type GetSubmissionsErrors = {
    /**
     * No se encontraron entregas
     */
    400: ErrorResponse;
};

export type GetSubmissionsError = GetSubmissionsErrors[keyof GetSubmissionsErrors];

export type GetSubmissionsResponses = {
    /**
     * Lista de entregas obtenida
     */
    200: Array<SubmissionRead>;
};

export type GetSubmissionsResponse = GetSubmissionsResponses[keyof GetSubmissionsResponses];

export type CreateSubmissionData = {
    body: SubmissionCreate;
    path?: never;
    query?: never;
    url: '/submissions/';
};

export type CreateSubmissionErrors = {
    /**
     * Error en los datos enviados
     */
    400: ErrorResponse;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateSubmissionError = CreateSubmissionErrors[keyof CreateSubmissionErrors];

export type CreateSubmissionResponses = {
    /**
     * Entrega creada
     */
    200: SubmissionCreate;
};

export type CreateSubmissionResponse = CreateSubmissionResponses[keyof CreateSubmissionResponses];

export type GetSubmissionsByUserIdData = {
    body?: never;
    path: {
        user_id: number;
    };
    query?: never;
    url: '/submissions/user/{user_id}';
};

export type GetSubmissionsByUserIdErrors = {
    /**
     * No se puede acceder a las entregas de otro usuario
     */
    403: ErrorResponse;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetSubmissionsByUserIdError = GetSubmissionsByUserIdErrors[keyof GetSubmissionsByUserIdErrors];

export type GetSubmissionsByUserIdResponses = {
    /**
     * Lista de entregas obtenida
     */
    200: Array<SubmissionRead>;
};

export type GetSubmissionsByUserIdResponse = GetSubmissionsByUserIdResponses[keyof GetSubmissionsByUserIdResponses];

export type GetSubmissionByIdData = {
    body?: never;
    path: {
        submission_id: number;
    };
    query?: never;
    url: '/submissions/{submission_id}';
};

export type GetSubmissionByIdErrors = {
    /**
     * No tienes permiso para acceder a este recurso
     */
    403: ErrorResponse;
    /**
     * Entrega no encontrada
     */
    404: ErrorResponse;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetSubmissionByIdError = GetSubmissionByIdErrors[keyof GetSubmissionByIdErrors];

export type GetSubmissionByIdResponses = {
    /**
     * Entrega encontrada
     */
    200: SubmissionRead;
};

export type GetSubmissionByIdResponse = GetSubmissionByIdResponses[keyof GetSubmissionByIdResponses];

export type UpdateSubmissionData = {
    body: SubmissionUpdate;
    path: {
        submission_id: number;
    };
    query?: never;
    url: '/submissions/{submission_id}';
};

export type UpdateSubmissionErrors = {
    /**
     * Entrega no encontrada
     */
    404: ErrorResponse;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UpdateSubmissionError = UpdateSubmissionErrors[keyof UpdateSubmissionErrors];

export type UpdateSubmissionResponses = {
    /**
     * Entrega actualizada
     */
    200: SubmissionUpdate;
};

export type UpdateSubmissionResponse = UpdateSubmissionResponses[keyof UpdateSubmissionResponses];

export type GetProblemsData = {
    body?: never;
    path?: never;
    query?: {
        skip?: number;
        limit?: number;
    };
    url: '/problems/';
};

export type GetProblemsErrors = {
    /**
     * No se encontraron problemas
     */
    404: ErrorResponse;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetProblemsError = GetProblemsErrors[keyof GetProblemsErrors];

export type GetProblemsResponses = {
    /**
     * Lista de problemas obtenida
     */
    200: Array<ProblemRead>;
};

export type GetProblemsResponse = GetProblemsResponses[keyof GetProblemsResponses];

export type CreateProblemData = {
    body: ProblemCreate;
    path?: never;
    query?: never;
    url: '/problems/';
};

export type CreateProblemErrors = {
    /**
     * Problema no creado
     */
    404: ErrorResponse;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateProblemError = CreateProblemErrors[keyof CreateProblemErrors];

export type CreateProblemResponses = {
    /**
     * Problema creado
     */
    200: ProblemCreate;
};

export type CreateProblemResponse = CreateProblemResponses[keyof CreateProblemResponses];

export type GetProblemByIdData = {
    body?: never;
    path: {
        problem_id: number;
    };
    query?: never;
    url: '/problems/id:{problem_id}';
};

export type GetProblemByIdErrors = {
    /**
     * Problema no encontrado
     */
    404: ErrorResponse;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetProblemByIdError = GetProblemByIdErrors[keyof GetProblemByIdErrors];

export type GetProblemByIdResponses = {
    /**
     * Problema encontrado
     */
    200: ProblemRead;
};

export type GetProblemByIdResponse = GetProblemByIdResponses[keyof GetProblemByIdResponses];

export type GetProblemsByBlockData = {
    body?: never;
    path: {
        block: string;
    };
    query?: never;
    url: '/problems/block/{block}';
};

export type GetProblemsByBlockErrors = {
    /**
     * No se encontraron problemas o no existe el bloque solicitado.
     */
    404: ErrorResponse;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetProblemsByBlockError = GetProblemsByBlockErrors[keyof GetProblemsByBlockErrors];

export type GetProblemsByBlockResponses = {
    /**
     * Lista de problemas obtenida
     */
    200: Array<ProblemRead>;
};

export type GetProblemsByBlockResponse = GetProblemsByBlockResponses[keyof GetProblemsByBlockResponses];

export type GetProblemsBlocksData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/problems/problem-blocks';
};

export type GetProblemsBlocksErrors = {
    /**
     * No se encontraron bloques de problemas
     */
    404: ErrorResponse;
};

export type GetProblemsBlocksError = GetProblemsBlocksErrors[keyof GetProblemsBlocksErrors];

export type GetProblemsBlocksResponses = {
    /**
     * Lista de bloques obtenida
     */
    200: Array<string>;
};

export type GetProblemsBlocksResponse = GetProblemsBlocksResponses[keyof GetProblemsBlocksResponses];

export type ListProblemsByDifficultyData = {
    body?: never;
    path: {
        difficulty: string;
    };
    query?: never;
    url: '/problems/difficulty/{difficulty}';
};

export type ListProblemsByDifficultyErrors = {
    /**
     * No se encontraron problemas con la dificultad especificada
     */
    404: ErrorResponse;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ListProblemsByDifficultyError = ListProblemsByDifficultyErrors[keyof ListProblemsByDifficultyErrors];

export type ListProblemsByDifficultyResponses = {
    /**
     * Lista de problemas obtenida
     */
    200: Array<ProblemRead>;
};

export type ListProblemsByDifficultyResponse = ListProblemsByDifficultyResponses[keyof ListProblemsByDifficultyResponses];

export type DeleteProblemData = {
    body?: never;
    path: {
        problem_id: number;
    };
    query?: never;
    url: '/problems/{problem_id}';
};

export type DeleteProblemErrors = {
    /**
     * Problema no encontrado
     */
    404: ErrorResponse;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteProblemError = DeleteProblemErrors[keyof DeleteProblemErrors];

export type DeleteProblemResponses = {
    /**
     * Problema eliminado
     */
    200: ProblemRead;
};

export type DeleteProblemResponse = DeleteProblemResponses[keyof DeleteProblemResponses];

export type UpdateProblemData = {
    body: ProblemUpdate;
    path: {
        problem_id: number;
    };
    query?: never;
    url: '/problems/{problem_id}';
};

export type UpdateProblemErrors = {
    /**
     * Problema no encontrado
     */
    404: ErrorResponse;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UpdateProblemError = UpdateProblemErrors[keyof UpdateProblemErrors];

export type UpdateProblemResponses = {
    /**
     * Problema actualizado
     */
    200: ProblemUpdate;
};

export type UpdateProblemResponse = UpdateProblemResponses[keyof UpdateProblemResponses];

export type GetRolesData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/roles/';
};

export type GetRolesErrors = {
    /**
     * No se encontraron roles
     */
    404: ErrorResponse;
};

export type GetRolesError = GetRolesErrors[keyof GetRolesErrors];

export type GetRolesResponses = {
    /**
     * Lista de roles obtenida
     */
    200: Array<RoleBase>;
};

export type GetRolesResponse = GetRolesResponses[keyof GetRolesResponses];

export type CreateRoleData = {
    body: RoleBase;
    path?: never;
    query?: never;
    url: '/roles/';
};

export type CreateRoleErrors = {
    /**
     * Error en los datos enviados
     */
    400: ErrorResponse;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateRoleError = CreateRoleErrors[keyof CreateRoleErrors];

export type CreateRoleResponses = {
    /**
     * Rol creado
     */
    200: RoleBase;
};

export type CreateRoleResponse = CreateRoleResponses[keyof CreateRoleResponses];

export type DeleteRoleData = {
    body?: never;
    path: {
        role_name: string;
    };
    query?: never;
    url: '/roles/{role_name}';
};

export type DeleteRoleErrors = {
    /**
     * Rol no encontrado
     */
    404: ErrorResponse;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteRoleError = DeleteRoleErrors[keyof DeleteRoleErrors];

export type DeleteRoleResponses = {
    /**
     * Rol eliminado
     */
    200: RoleBase;
};

export type DeleteRoleResponse = DeleteRoleResponses[keyof DeleteRoleResponses];

export type GetRoleByNameData = {
    body?: never;
    path: {
        role_name: string;
    };
    query?: never;
    url: '/roles/{role_name}';
};

export type GetRoleByNameErrors = {
    /**
     * Rol no encontrado
     */
    404: ErrorResponse;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetRoleByNameError = GetRoleByNameErrors[keyof GetRoleByNameErrors];

export type GetRoleByNameResponses = {
    /**
     * Rol encontrado
     */
    200: RoleBase;
};

export type GetRoleByNameResponse = GetRoleByNameResponses[keyof GetRoleByNameResponses];

export type UpdateRoleData = {
    body: RoleUpdate;
    path: {
        role_name: string;
    };
    query?: never;
    url: '/roles/{role_name}';
};

export type UpdateRoleErrors = {
    /**
     * Rol no encontrado
     */
    404: ErrorResponse;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UpdateRoleError = UpdateRoleErrors[keyof UpdateRoleErrors];

export type UpdateRoleResponses = {
    /**
     * Rol actualizado
     */
    200: RoleUpdate;
};

export type UpdateRoleResponse = UpdateRoleResponses[keyof UpdateRoleResponses];

export type AssignRoleData = {
    body?: never;
    path: {
        role_name: string;
        user_id: number;
    };
    query?: never;
    url: '/roles/{role_name}/assign/{user_id}';
};

export type AssignRoleErrors = {
    /**
     * El usuario ya tiene asignado el rol
     */
    400: ErrorResponse;
    /**
     * Usuario no encontrado
     */
    404: ErrorResponse;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type AssignRoleError = AssignRoleErrors[keyof AssignRoleErrors];

export type AssignRoleResponses = {
    /**
     * Rol asignado
     */
    200: UserPublic;
};

export type AssignRoleResponse = AssignRoleResponses[keyof AssignRoleResponses];

export type RevokeRoleData = {
    body?: never;
    path: {
        role_name: string;
        user_id: number;
    };
    query?: never;
    url: '/roles/{role_name}/revoke/{user_id}';
};

export type RevokeRoleErrors = {
    /**
     * El usuario no tiene asignado el rol
     */
    400: ErrorResponse;
    /**
     * Usuario no encontrado
     */
    404: ErrorResponse;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type RevokeRoleError = RevokeRoleErrors[keyof RevokeRoleErrors];

export type RevokeRoleResponses = {
    /**
     * Rol revocado
     */
    200: UserPublic;
};

export type RevokeRoleResponse = RevokeRoleResponses[keyof RevokeRoleResponses];

export type GetUserRolesData = {
    body?: never;
    path: {
        user_id: number;
    };
    query?: never;
    url: '/roles/user/{user_id}';
};

export type GetUserRolesErrors = {
    /**
     * Usuario no encontrado
     */
    404: ErrorResponse;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetUserRolesError = GetUserRolesErrors[keyof GetUserRolesErrors];

export type GetUserRolesResponses = {
    /**
     * Lista de roles obtenida
     */
    200: Array<UserPublic>;
};

export type GetUserRolesResponse = GetUserRolesResponses[keyof GetUserRolesResponses];

export type GetRoleUsersData = {
    body?: never;
    path: {
        role_name: string;
    };
    query?: never;
    url: '/roles/{role_name}/users';
};

export type GetRoleUsersErrors = {
    /**
     * Rol no encontrado
     */
    404: ErrorResponse;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetRoleUsersError = GetRoleUsersErrors[keyof GetRoleUsersErrors];

export type GetRoleUsersResponses = {
    /**
     * Lista de usuarios obtenida
     */
    200: Array<UserPublic>;
};

export type GetRoleUsersResponse = GetRoleUsersResponses[keyof GetRoleUsersResponses];

export type GetCommentsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/comments/';
};

export type GetCommentsErrors = {
    /**
     * No se encontraron comentarios
     */
    404: ErrorResponse;
};

export type GetCommentsError = GetCommentsErrors[keyof GetCommentsErrors];

export type GetCommentsResponses = {
    /**
     * Lista de comentarios obtenida
     */
    200: Array<CommentRead>;
};

export type GetCommentsResponse = GetCommentsResponses[keyof GetCommentsResponses];

export type CreateCommentData = {
    body: CommentCreate;
    path?: never;
    query?: never;
    url: '/comments/';
};

export type CreateCommentErrors = {
    /**
     * No se pudo crear el comentario
     */
    404: ErrorResponse;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateCommentError = CreateCommentErrors[keyof CreateCommentErrors];

export type CreateCommentResponses = {
    /**
     * Comentario creado
     */
    200: CommentRead;
};

export type CreateCommentResponse = CreateCommentResponses[keyof CreateCommentResponses];

export type DeleteCommentData = {
    body?: never;
    path: {
        comment_id: number;
    };
    query?: never;
    url: '/comments/{comment_id}';
};

export type DeleteCommentErrors = {
    /**
     * El usuario no tiene permisos para acceder a este recurso
     */
    403: ErrorResponse;
    /**
     * Comentario no encontrado
     */
    404: ErrorResponse;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteCommentError = DeleteCommentErrors[keyof DeleteCommentErrors];

export type DeleteCommentResponses = {
    /**
     * Comentario eliminado
     */
    200: CommentRead;
};

export type DeleteCommentResponse = DeleteCommentResponses[keyof DeleteCommentResponses];

export type GetCommentByIdData = {
    body?: never;
    path: {
        comment_id: number;
    };
    query?: never;
    url: '/comments/{comment_id}';
};

export type GetCommentByIdErrors = {
    /**
     * El comentario no existe
     */
    404: ErrorResponse;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetCommentByIdError = GetCommentByIdErrors[keyof GetCommentByIdErrors];

export type GetCommentByIdResponses = {
    /**
     * Comentario encontrado
     */
    200: CommentRead;
};

export type GetCommentByIdResponse = GetCommentByIdResponses[keyof GetCommentByIdResponses];

export type UpdateCommentData = {
    body: CommentUpdate;
    path: {
        comment_id: number;
    };
    query?: never;
    url: '/comments/{comment_id}';
};

export type UpdateCommentErrors = {
    /**
     * Comentario no encontrado
     */
    404: ErrorResponse;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UpdateCommentError = UpdateCommentErrors[keyof UpdateCommentErrors];

export type UpdateCommentResponses = {
    /**
     * Comentario actualizado
     */
    200: CommentRead;
};

export type UpdateCommentResponse = UpdateCommentResponses[keyof UpdateCommentResponses];

export type GetCommentsByUserIdData = {
    body?: never;
    path: {
        user_id: number;
    };
    query?: never;
    url: '/comments/user/{user_id}';
};

export type GetCommentsByUserIdErrors = {
    /**
     * No se encontraron comentarios
     */
    404: ErrorResponse;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetCommentsByUserIdError = GetCommentsByUserIdErrors[keyof GetCommentsByUserIdErrors];

export type GetCommentsByUserIdResponses = {
    /**
     * Lista de comentarios obtenida
     */
    200: Array<CommentRead>;
};

export type GetCommentsByUserIdResponse = GetCommentsByUserIdResponses[keyof GetCommentsByUserIdResponses];

export type GetNotificationsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/notifications/';
};

export type GetNotificationsErrors = {
    /**
     * No se encontraron notificaciones
     */
    404: ErrorResponse;
};

export type GetNotificationsError = GetNotificationsErrors[keyof GetNotificationsErrors];

export type GetNotificationsResponses = {
    /**
     * Lista de notificaciones obtenida
     */
    200: NotificationsList;
};

export type GetNotificationsResponse = GetNotificationsResponses[keyof GetNotificationsResponses];

export type CreateNotificationData = {
    body: NotificationCreate;
    path?: never;
    query?: never;
    url: '/notifications/';
};

export type CreateNotificationErrors = {
    /**
     * Error al crear la notificación
     */
    404: ErrorResponse;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateNotificationError = CreateNotificationErrors[keyof CreateNotificationErrors];

export type CreateNotificationResponses = {
    /**
     * Notificación creada
     */
    200: NotificationRead;
};

export type CreateNotificationResponse = CreateNotificationResponses[keyof CreateNotificationResponses];

export type DeleteNotificationData = {
    body?: never;
    path: {
        notification_id: number;
    };
    query?: never;
    url: '/notifications/{notification_id}';
};

export type DeleteNotificationErrors = {
    /**
     * Notificación no encontrada
     */
    404: ErrorResponse;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteNotificationError = DeleteNotificationErrors[keyof DeleteNotificationErrors];

export type DeleteNotificationResponses = {
    /**
     * Notificación eliminada
     */
    200: NotificationRead;
};

export type DeleteNotificationResponse = DeleteNotificationResponses[keyof DeleteNotificationResponses];

export type GetNotificationByIdData = {
    body?: never;
    path: {
        notification_id: number;
    };
    query?: never;
    url: '/notifications/{notification_id}';
};

export type GetNotificationByIdErrors = {
    /**
     * Notificación no encontrada
     */
    404: ErrorResponse;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetNotificationByIdError = GetNotificationByIdErrors[keyof GetNotificationByIdErrors];

export type GetNotificationByIdResponses = {
    /**
     * Notificación encontrada
     */
    200: NotificationRead;
};

export type GetNotificationByIdResponse = GetNotificationByIdResponses[keyof GetNotificationByIdResponses];

export type ReadNotificationData = {
    body?: never;
    path: {
        notification_id: number;
    };
    query?: never;
    url: '/notifications/{notification_id}';
};

export type ReadNotificationErrors = {
    /**
     * Notificación no encontrada
     */
    404: ErrorResponse;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ReadNotificationError = ReadNotificationErrors[keyof ReadNotificationErrors];

export type ReadNotificationResponses = {
    /**
     * Notificación actualizada
     */
    200: NotificationRead;
};

export type ReadNotificationResponse = ReadNotificationResponses[keyof ReadNotificationResponses];

export type GetMyNotificationsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/notifications/user/me';
};

export type GetMyNotificationsErrors = {
    /**
     * No se encontraron notificaciones
     */
    404: ErrorResponse;
};

export type GetMyNotificationsError = GetMyNotificationsErrors[keyof GetMyNotificationsErrors];

export type GetMyNotificationsResponses = {
    /**
     * Lista de notificaciones obtenida
     */
    200: NotificationsList;
};

export type GetMyNotificationsResponse = GetMyNotificationsResponses[keyof GetMyNotificationsResponses];

export type GetNotificationsByUserIdData = {
    body?: never;
    path: {
        user_id: number;
    };
    query?: never;
    url: '/notifications/user/{user_id}';
};

export type GetNotificationsByUserIdErrors = {
    /**
     * No se encontraron notificaciones
     */
    404: ErrorResponse;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetNotificationsByUserIdError = GetNotificationsByUserIdErrors[keyof GetNotificationsByUserIdErrors];

export type GetNotificationsByUserIdResponses = {
    /**
     * Lista de notificaciones obtenida
     */
    200: Array<NotificationRead>;
};

export type GetNotificationsByUserIdResponse = GetNotificationsByUserIdResponses[keyof GetNotificationsByUserIdResponses];

export type GetReportsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/reports/';
};

export type GetReportsErrors = {
    /**
     * No se encontraron reportes
     */
    404: ErrorResponse;
};

export type GetReportsError = GetReportsErrors[keyof GetReportsErrors];

export type GetReportsResponses = {
    /**
     * Listado de reportes
     */
    200: Array<ReportRead>;
};

export type GetReportsResponse = GetReportsResponses[keyof GetReportsResponses];

export type CreateReportData = {
    body: ReportCreate;
    path?: never;
    query?: never;
    url: '/reports/';
};

export type CreateReportErrors = {
    /**
     * Error en los datos enviados
     */
    400: ErrorResponse;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateReportError = CreateReportErrors[keyof CreateReportErrors];

export type CreateReportResponses = {
    /**
     * Reporte creado
     */
    200: ReportRead;
};

export type CreateReportResponse = CreateReportResponses[keyof CreateReportResponses];

export type GetReportsByProblemIdData = {
    body?: never;
    path: {
        problem_id: number;
    };
    query?: never;
    url: '/reports/problem/{problem_id}';
};

export type GetReportsByProblemIdErrors = {
    /**
     * No se encontraron reportes
     */
    404: ErrorResponse;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetReportsByProblemIdError = GetReportsByProblemIdErrors[keyof GetReportsByProblemIdErrors];

export type GetReportsByProblemIdResponses = {
    /**
     * Listado de reportes
     */
    200: Array<ReportRead>;
};

export type GetReportsByProblemIdResponse = GetReportsByProblemIdResponses[keyof GetReportsByProblemIdResponses];

export type DeleteReportData = {
    body?: never;
    path: {
        report_id: number;
    };
    query?: never;
    url: '/reports/{report_id}';
};

export type DeleteReportErrors = {
    /**
     * Reporte no encontrado
     */
    404: ErrorResponse;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteReportError = DeleteReportErrors[keyof DeleteReportErrors];

export type DeleteReportResponses = {
    /**
     * Reporte eliminado
     */
    200: ReportRead;
};

export type DeleteReportResponse = DeleteReportResponses[keyof DeleteReportResponses];

export type ReadReportData = {
    body?: never;
    path: {
        report_id: number;
    };
    query?: never;
    url: '/reports/{report_id}';
};

export type ReadReportErrors = {
    /**
     * Reporte no encontrado
     */
    404: ErrorResponse;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ReadReportError = ReadReportErrors[keyof ReadReportErrors];

export type ReadReportResponses = {
    /**
     * Reporte actualizado
     */
    200: ReportRead;
};

export type ReadReportResponse = ReadReportResponses[keyof ReadReportResponses];

export type GetTestCasesData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/testCases/';
};

export type GetTestCasesErrors = {
    /**
     * No se encontraron casos de prueba
     */
    400: ErrorResponse;
};

export type GetTestCasesError = GetTestCasesErrors[keyof GetTestCasesErrors];

export type GetTestCasesResponses = {
    /**
     * Lista de casos de prueba obtenida
     */
    200: Array<TestCaseRead>;
};

export type GetTestCasesResponse = GetTestCasesResponses[keyof GetTestCasesResponses];

export type CreateTestCaseData = {
    body: TestCaseCreate;
    path?: never;
    query?: never;
    url: '/testCases/';
};

export type CreateTestCaseErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateTestCaseError = CreateTestCaseErrors[keyof CreateTestCaseErrors];

export type CreateTestCaseResponses = {
    /**
     * Caso de prueba creado
     */
    200: TestCaseRead;
};

export type CreateTestCaseResponse = CreateTestCaseResponses[keyof CreateTestCaseResponses];

export type DeleteTestCaseData = {
    body?: never;
    path?: never;
    query: {
        test_case_id: number;
    };
    url: '/testCases/{testCase_id}';
};

export type DeleteTestCaseErrors = {
    /**
     * Caso de prueba no encontrado
     */
    404: ErrorResponse;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteTestCaseError = DeleteTestCaseErrors[keyof DeleteTestCaseErrors];

export type DeleteTestCaseResponses = {
    /**
     * Caso de prueba eliminado
     */
    200: TestCaseRead;
};

export type DeleteTestCaseResponse = DeleteTestCaseResponses[keyof DeleteTestCaseResponses];

export type GetTestCaseByIdData = {
    body?: never;
    path?: never;
    query: {
        test_case_id: number;
    };
    url: '/testCases/{testCase_id}';
};

export type GetTestCaseByIdErrors = {
    /**
     * Caso de prueba no encontrado
     */
    404: ErrorResponse;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetTestCaseByIdError = GetTestCaseByIdErrors[keyof GetTestCaseByIdErrors];

export type GetTestCaseByIdResponses = {
    /**
     * Caso de prueba encontrado
     */
    200: TestCaseRead;
};

export type GetTestCaseByIdResponse = GetTestCaseByIdResponses[keyof GetTestCaseByIdResponses];

export type UpdateTestCaseData = {
    body: TestCaseUpdate;
    path?: never;
    query: {
        test_case_id: number;
    };
    url: '/testCases/{testCase_id}';
};

export type UpdateTestCaseErrors = {
    /**
     * Caso de prueba no encontrado
     */
    404: ErrorResponse;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UpdateTestCaseError = UpdateTestCaseErrors[keyof UpdateTestCaseErrors];

export type UpdateTestCaseResponses = {
    /**
     * Caso de prueba actualizado
     */
    200: TestCaseRead;
};

export type UpdateTestCaseResponse = UpdateTestCaseResponses[keyof UpdateTestCaseResponses];

export type GetTestCasesByProblemIdData = {
    body?: never;
    path: {
        problem_id: number;
    };
    query?: never;
    url: '/testCases/problem/{problem_id}';
};

export type GetTestCasesByProblemIdErrors = {
    /**
     * No se encontraron casos de prueba o no existe el problema solicitado.
     */
    404: ErrorResponse;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetTestCasesByProblemIdError = GetTestCasesByProblemIdErrors[keyof GetTestCasesByProblemIdErrors];

export type GetTestCasesByProblemIdResponses = {
    /**
     * Lista de casos de prueba obtenida
     */
    200: Array<TestCaseRead>;
};

export type GetTestCasesByProblemIdResponse = GetTestCasesByProblemIdResponses[keyof GetTestCasesByProblemIdResponses];

export type CodeData = {
    body?: never;
    path?: never;
    query: {
        code: string;
    };
    url: '/code/';
};

export type CodeErrors = {
    /**
     * Error al crear el código
     */
    400: ErrorResponse;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CodeError = CodeErrors[keyof CodeErrors];

export type CodeResponses = {
    /**
     * Código creado
     */
    200: Message;
};

export type CodeResponse = CodeResponses[keyof CodeResponses];

export type ClientOptions = {
    baseURL: 'http://localhost:8000' | (string & {});
};