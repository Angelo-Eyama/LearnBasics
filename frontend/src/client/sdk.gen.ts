// This file is auto-generated by @hey-api/openapi-ts

import { type Options as ClientOptions, type TDataShape, type Client, urlSearchParamsBodySerializer } from '@hey-api/client-axios';
import type { ReadRootData, ReadRootResponse, ReadRootError, CustomDocsData, CustomDocsResponse, CustomDocsError, LoginForAccessTokenData, LoginForAccessTokenResponse, LoginForAccessTokenError, RegisterUserData, RegisterUserResponse, RegisterUserError, PasswordRecoveryData, PasswordRecoveryResponse, PasswordRecoveryError, PasswordResetData, PasswordResetResponse, PasswordResetError, VerifyRegisterTokenData, VerifyRegisterTokenResponse, VerifyRegisterTokenError, VerifyAccountData, VerifyAccountResponse, VerifyAccountError, GetUsersData, GetUsersResponse, GetUsersError, CreateUserData, CreateUserResponse, CreateUserError, DeleteCurrentUserData, DeleteCurrentUserResponse, DeleteCurrentUserError, GetCurrentUserData, GetCurrentUserResponse, GetCurrentUserError, UpdateCurrentUserData, UpdateCurrentUserResponse, UpdateCurrentUserError, GetUserByIdData, GetUserByIdResponse, GetUserByIdError, GetUserByUsernameData, GetUserByUsernameResponse, GetUserByUsernameError, DeleteUserData, DeleteUserResponse, DeleteUserError, UpdateUserData, UpdateUserResponse, UpdateUserError, VerifyUserData, VerifyUserResponse, VerifyUserError, ChangeUserStatusData, ChangeUserStatusResponse, ChangeUserStatusError, GetSubmissionsData, GetSubmissionsResponse, GetSubmissionsError, CreateSubmissionData, CreateSubmissionResponse, CreateSubmissionError, GetMySubmissionsData, GetMySubmissionsResponse, DeleteMySubmissionData, DeleteMySubmissionResponse, DeleteMySubmissionError, GetSubmissionsByUserIdData, GetSubmissionsByUserIdResponse, GetSubmissionsByUserIdError, GetSubmissionByIdData, GetSubmissionByIdResponse, GetSubmissionByIdError, UpdateSubmissionData, UpdateSubmissionResponse, UpdateSubmissionError, GetProblemsData, GetProblemsResponse, GetProblemsError, CreateProblemData, CreateProblemResponse, CreateProblemError, GetProblemByIdData, GetProblemByIdResponse, GetProblemByIdError, ListProblemsByDifficultyData, ListProblemsByDifficultyResponse, ListProblemsByDifficultyError, DeleteProblemData, DeleteProblemResponse, DeleteProblemError, UpdateProblemData, UpdateProblemResponse, UpdateProblemError, GetRolesData, GetRolesResponse, GetRolesError, CreateRoleData, CreateRoleResponse, CreateRoleError, DeleteRoleData, DeleteRoleResponse, DeleteRoleError, GetRoleByNameData, GetRoleByNameResponse, GetRoleByNameError, UpdateRoleData, UpdateRoleResponse, UpdateRoleError, AssignRoleData, AssignRoleResponse, AssignRoleError, RevokeRoleData, RevokeRoleResponse, RevokeRoleError, GetUserRolesData, GetUserRolesResponse, GetUserRolesError, GetRoleUsersData, GetRoleUsersResponse, GetRoleUsersError, GetCommentsData, GetCommentsResponse, GetCommentsError, CreateCommentData, CreateCommentResponse, CreateCommentError, GetCommentsByProblemIdData, GetCommentsByProblemIdResponse, GetCommentsByProblemIdError, DeleteCommentData, DeleteCommentResponse, DeleteCommentError, GetCommentByIdData, GetCommentByIdResponse, GetCommentByIdError, UpdateCommentData, UpdateCommentResponse, UpdateCommentError, GetCommentsByUserIdData, GetCommentsByUserIdResponse, GetCommentsByUserIdError, ChangeCommentApprovalData, ChangeCommentApprovalResponse, ChangeCommentApprovalError, GetNotificationsData, GetNotificationsResponse, GetNotificationsError, CreateNotificationData, CreateNotificationResponse, CreateNotificationError, DeleteNotificationData, DeleteNotificationResponse, DeleteNotificationError, GetNotificationByIdData, GetNotificationByIdResponse, GetNotificationByIdError, ReadNotificationData, ReadNotificationResponse, ReadNotificationError, GetMyNotificationsData, GetMyNotificationsResponse, GetMyNotificationsError, GetNotificationsByUserIdData, GetNotificationsByUserIdResponse, GetNotificationsByUserIdError, GetReportsData, GetReportsResponse, GetReportsError, CreateReportData, CreateReportResponse, CreateReportError, GetReportsByProblemIdData, GetReportsByProblemIdResponse, GetReportsByProblemIdError, DeleteReportData, DeleteReportResponse, DeleteReportError, UpdateReportData, UpdateReportResponse, UpdateReportError, ReadReportData, ReadReportResponse, ReadReportError, GetTestCasesData, GetTestCasesResponse, GetTestCasesError, CreateTestCaseData, CreateTestCaseResponse, CreateTestCaseError, GetTestCaseByIdData, GetTestCaseByIdResponse, GetTestCaseByIdError, GetTestCasesByProblemIdData, GetTestCasesByProblemIdResponse, GetTestCasesByProblemIdError, DeleteTestCaseData, DeleteTestCaseResponse, DeleteTestCaseError, UpdateTestCaseData, UpdateTestCaseResponse, UpdateTestCaseError, GetFeedbackData, GetFeedbackResponse, GetFeedbackError, CodeData, CompileCodeData, CompileCodeResponse, CompileCodeError } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Read Root
 */
export const readRoot = <ThrowOnError extends boolean = false>(options?: Options<ReadRootData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ReadRootResponse, ReadRootError, ThrowOnError>({
        url: '/',
        ...options
    });
};

/**
 * Customdocs
 */
export const customDocs = <ThrowOnError extends boolean = false>(options?: Options<CustomDocsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<CustomDocsResponse, CustomDocsError, ThrowOnError>({
        url: '/openapi.json',
        ...options
    });
};

/**
 * Generar token de acceso
 * Solicita datos de inicio de sesion y genera un token de acceso para el usuario.
 */
export const loginForAccessToken = <ThrowOnError extends boolean = false>(options: Options<LoginForAccessTokenData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<LoginForAccessTokenResponse, LoginForAccessTokenError, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        url: '/auth/access-token',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        }
    });
};

/**
 * Registrar un usuario
 * Registra un nuevo usuario en el sistema con datos minimos.
 */
export const registerUser = <ThrowOnError extends boolean = false>(options: Options<RegisterUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RegisterUserResponse, RegisterUserError, ThrowOnError>({
        url: '/auth/register',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Solicitar recuperacion de contrase単a
 * El usuario solicita recuperar su contrase単a. Se enviara un correo electronico con el token de recuperacion.
 */
export const passwordRecovery = <ThrowOnError extends boolean = false>(options: Options<PasswordRecoveryData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PasswordRecoveryResponse, PasswordRecoveryError, ThrowOnError>({
        url: '/auth/password-recovery',
        ...options
    });
};

/**
 * Restablecer contrase単a
 * El usuario introduce los datos de su nueva contrase単a y el token de recuperacion.
 */
export const passwordReset = <ThrowOnError extends boolean = false>(options: Options<PasswordResetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PasswordResetResponse, PasswordResetError, ThrowOnError>({
        url: '/auth/password-reset',
        ...options
    });
};

/**
 * Solicitar token de registro
 * El usuario solicita el token de verificacion y para poder verificar su cuenta.
 */
export const verifyRegisterToken = <ThrowOnError extends boolean = false>(options: Options<VerifyRegisterTokenData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<VerifyRegisterTokenResponse, VerifyRegisterTokenError, ThrowOnError>({
        url: '/auth/verify-register-token',
        ...options
    });
};

/**
 * Verificar cuenta de usuario
 * El usuario introduce el token de verificacion y se le activa la cuenta.
 */
export const verifyAccount = <ThrowOnError extends boolean = false>(options: Options<VerifyAccountData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<VerifyAccountResponse, VerifyAccountError, ThrowOnError>({
        url: '/auth/verify-account',
        ...options
    });
};

/**
 * Obtener todos los usuarios
 * Obtiene una lista con todos los usuarios registrados en el sistema.
 */
export const getUsers = <ThrowOnError extends boolean = false>(options?: Options<GetUsersData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetUsersResponse, GetUsersError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users/',
        ...options
    });
};

/**
 * Crear un usuario
 * Crea un nuevo usuario en el sistema.
 */
export const createUser = <ThrowOnError extends boolean = false>(options: Options<CreateUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateUserResponse, CreateUserError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Eliminar el usuario actual
 * Elimina el usuario que ha iniciado sesi坦n en el sistema.
 */
export const deleteCurrentUser = <ThrowOnError extends boolean = false>(options?: Options<DeleteCurrentUserData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).delete<DeleteCurrentUserResponse, DeleteCurrentUserError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users/me',
        ...options
    });
};

/**
 * Obtener el usuario actual
 * Obtiene el usuario que ha iniciado sesi坦n en el sistema.
 */
export const getCurrentUser = <ThrowOnError extends boolean = false>(options?: Options<GetCurrentUserData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetCurrentUserResponse, GetCurrentUserError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users/me',
        ...options
    });
};

/**
 * Actualizar el usuario actual
 * Actualiza uno o varios campos del usuario que ha iniciado sesi坦n en el sistema.
 */
export const updateCurrentUser = <ThrowOnError extends boolean = false>(options: Options<UpdateCurrentUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UpdateCurrentUserResponse, UpdateCurrentUserError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users/me',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Obtener un usuario por su ID
 * Obtiene un usuario del sistema utilizando su ID como clave.
 */
export const getUserById = <ThrowOnError extends boolean = false>(options: Options<GetUserByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetUserByIdResponse, GetUserByIdError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users/id:{user_id}',
        ...options
    });
};

/**
 * Obtener un usuario por su nombre de usuario
 * Obtiene un usuario del sistema utilizando su nombre de usuario como clave.
 */
export const getUserByUsername = <ThrowOnError extends boolean = false>(options: Options<GetUserByUsernameData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetUserByUsernameResponse, GetUserByUsernameError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users/{username}',
        ...options
    });
};

/**
 * Eliminar un usuario
 * Elimina un usuario del sistema utilizando su ID como clave.
 */
export const deleteUser = <ThrowOnError extends boolean = false>(options: Options<DeleteUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteUserResponse, DeleteUserError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users/{user_id}',
        ...options
    });
};

/**
 * Actualizar un usuario
 * Actualiza uno o varios campos de un usuario en el sistema utilizando su ID como clave.
 */
export const updateUser = <ThrowOnError extends boolean = false>(options: Options<UpdateUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UpdateUserResponse, UpdateUserError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users/{user_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Verificar un usuario
 */
export const verifyUser = <ThrowOnError extends boolean = false>(options: Options<VerifyUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<VerifyUserResponse, VerifyUserError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users/verify/{user_id}',
        ...options
    });
};

/**
 * Cambiar el estado de un usuario
 */
export const changeUserStatus = <ThrowOnError extends boolean = false>(options: Options<ChangeUserStatusData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<ChangeUserStatusResponse, ChangeUserStatusError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users/change-status/{user_id}',
        ...options
    });
};

/**
 * Obtener todas las entregas
 * Obtiene una lista con todas las entregas registradas en el sistema.
 */
export const getSubmissions = <ThrowOnError extends boolean = false>(options?: Options<GetSubmissionsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetSubmissionsResponse, GetSubmissionsError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/submissions/',
        ...options
    });
};

/**
 * Crear una entrega
 * Crea una nueva entrega en el sistema.
 */
export const createSubmission = <ThrowOnError extends boolean = false>(options: Options<CreateSubmissionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateSubmissionResponse, CreateSubmissionError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/submissions/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Obtener entregas del usuario autenticado
 */
export const getMySubmissions = <ThrowOnError extends boolean = false>(options?: Options<GetMySubmissionsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetMySubmissionsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/submissions/user/me',
        ...options
    });
};

/**
 * Eliminar una entrega del usuario autenticado
 * Elimina una entrega del usuario autenticado utilizando su ID como clave.
 */
export const deleteMySubmission = <ThrowOnError extends boolean = false>(options: Options<DeleteMySubmissionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteMySubmissionResponse, DeleteMySubmissionError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/submissions/user/me/{submission_id}',
        ...options
    });
};

/**
 * Obtener entregas por ID de usuario
 * Obtiene una lista con todas las entregas registradas en el sistema realizadas por un usuario.
 */
export const getSubmissionsByUserId = <ThrowOnError extends boolean = false>(options: Options<GetSubmissionsByUserIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetSubmissionsByUserIdResponse, GetSubmissionsByUserIdError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/submissions/user/{user_id}',
        ...options
    });
};

/**
 * Obtener una entrega por su ID
 * Obtiene una entrega del sistema utilizando su ID como clave.
 */
export const getSubmissionById = <ThrowOnError extends boolean = false>(options: Options<GetSubmissionByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetSubmissionByIdResponse, GetSubmissionByIdError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/submissions/{submission_id}',
        ...options
    });
};

/**
 * Actualizar una entrega
 * Actualiza una entrega en el sistema utilizando su ID como clave.
 */
export const updateSubmission = <ThrowOnError extends boolean = false>(options: Options<UpdateSubmissionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UpdateSubmissionResponse, UpdateSubmissionError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/submissions/{submission_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Obtener todos los problemas
 * Obtiene una lista con todos los problemas registrados en el sistema.
 */
export const getProblems = <ThrowOnError extends boolean = false>(options?: Options<GetProblemsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetProblemsResponse, GetProblemsError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/problems/',
        ...options
    });
};

/**
 * Crear un problema
 * Crea un nuevo problema en el sistema.
 */
export const createProblem = <ThrowOnError extends boolean = false>(options: Options<CreateProblemData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateProblemResponse, CreateProblemError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/problems/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Obtener un problema por su ID
 * Obtiene un problema del sistema utilizando su ID como clave.
 */
export const getProblemById = <ThrowOnError extends boolean = false>(options: Options<GetProblemByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetProblemByIdResponse, GetProblemByIdError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/problems/id:{problem_id}',
        ...options
    });
};

/**
 * Obtener problemas por dificultad
 * Devuelve una lista de problemas filtrados por dificultad.
 */
export const listProblemsByDifficulty = <ThrowOnError extends boolean = false>(options: Options<ListProblemsByDifficultyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListProblemsByDifficultyResponse, ListProblemsByDifficultyError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/problems/difficulty/{difficulty}',
        ...options
    });
};

/**
 * Eliminar un problema
 * Elimina un problema del sistema utilizando su ID.
 */
export const deleteProblem = <ThrowOnError extends boolean = false>(options: Options<DeleteProblemData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteProblemResponse, DeleteProblemError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/problems/{problem_id}',
        ...options
    });
};

/**
 * Actualizar un problema
 * Actualiza un problema del sistema utilizando su ID como clave.
 */
export const updateProblem = <ThrowOnError extends boolean = false>(options: Options<UpdateProblemData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UpdateProblemResponse, UpdateProblemError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/problems/{problem_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Obtener todos los roles
 * Obtiene todos los roles del sistema.
 */
export const getRoles = <ThrowOnError extends boolean = false>(options?: Options<GetRolesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetRolesResponse, GetRolesError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/roles/',
        ...options
    });
};

/**
 * Crear un rol
 * Crea un nuevo rol en el sistema.
 */
export const createRole = <ThrowOnError extends boolean = false>(options: Options<CreateRoleData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateRoleResponse, CreateRoleError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/roles/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Eliminar un rol
 * Elimina un rol del sistema utilizando su ID.
 */
export const deleteRole = <ThrowOnError extends boolean = false>(options: Options<DeleteRoleData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteRoleResponse, DeleteRoleError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/roles/{role_name}',
        ...options
    });
};

/**
 * Obtener un rol por su ID
 * Obtiene un rol del sistema utilizando su ID.
 */
export const getRoleByName = <ThrowOnError extends boolean = false>(options: Options<GetRoleByNameData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetRoleByNameResponse, GetRoleByNameError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/roles/{role_name}',
        ...options
    });
};

/**
 * Actualizar un rol
 * Actualiza un rol del sistema utilizando su ID.
 */
export const updateRole = <ThrowOnError extends boolean = false>(options: Options<UpdateRoleData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UpdateRoleResponse, UpdateRoleError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/roles/{role_name}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Asignar un rol a un usuario
 * Asigna un rol a un usuario.
 */
export const assignRole = <ThrowOnError extends boolean = false>(options: Options<AssignRoleData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AssignRoleResponse, AssignRoleError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/roles/{role_name}/assign/{user_id}',
        ...options
    });
};

/**
 * Revocar un rol a un usuario
 * Revoca un rol a un usuario.
 */
export const revokeRole = <ThrowOnError extends boolean = false>(options: Options<RevokeRoleData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RevokeRoleResponse, RevokeRoleError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/roles/{role_name}/revoke/{user_id}',
        ...options
    });
};

/**
 * Obtener todos los roles de un usuario
 * Obtiene todos los roles de un usuario.
 */
export const getUserRoles = <ThrowOnError extends boolean = false>(options: Options<GetUserRolesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetUserRolesResponse, GetUserRolesError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/roles/user/{user_id}',
        ...options
    });
};

/**
 * Obtener todos los usuarios de un rol
 * Obtiene todos los usuarios de un rol.
 */
export const getRoleUsers = <ThrowOnError extends boolean = false>(options: Options<GetRoleUsersData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetRoleUsersResponse, GetRoleUsersError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/roles/{role_name}/users',
        ...options
    });
};

/**
 * Obtener todos los comentarios
 * Obtiene una lista con todos los comentarios registrados en el sistema.
 */
export const getComments = <ThrowOnError extends boolean = false>(options?: Options<GetCommentsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetCommentsResponse, GetCommentsError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/comments/',
        ...options
    });
};

/**
 * Crear un comentario
 * Crea un nuevo comentario en el sistema.
 */
export const createComment = <ThrowOnError extends boolean = false>(options: Options<CreateCommentData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateCommentResponse, CreateCommentError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/comments/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get Comments By Problem Id
 * Obtiene una lista con todos los comentarios registrados en el sistema para un problema espec鱈fico.
 */
export const getCommentsByProblemId = <ThrowOnError extends boolean = false>(options: Options<GetCommentsByProblemIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetCommentsByProblemIdResponse, GetCommentsByProblemIdError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/comments/problem/{problem_id}',
        ...options
    });
};

/**
 * Eliminar un comentario
 * Elimina un comentario del sistema utilizando su ID.
 */
export const deleteComment = <ThrowOnError extends boolean = false>(options: Options<DeleteCommentData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteCommentResponse, DeleteCommentError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/comments/{comment_id}',
        ...options
    });
};

/**
 * Obtener un comentario por su ID
 * Obtiene un comentario del sistema utilizando su ID como clave.
 */
export const getCommentById = <ThrowOnError extends boolean = false>(options: Options<GetCommentByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetCommentByIdResponse, GetCommentByIdError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/comments/{comment_id}',
        ...options
    });
};

/**
 * Actualizar un comentario
 * Actualiza un comentario del sistema utilizando su ID como clave.
 */
export const updateComment = <ThrowOnError extends boolean = false>(options: Options<UpdateCommentData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UpdateCommentResponse, UpdateCommentError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/comments/{comment_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Obtener comentarios por ID de usuario
 * Obtiene una lista con todos los comentarios registrados en el sistema realizados por un usuario.
 */
export const getCommentsByUserId = <ThrowOnError extends boolean = false>(options: Options<GetCommentsByUserIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetCommentsByUserIdResponse, GetCommentsByUserIdError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/comments/user/{user_id}',
        ...options
    });
};

/**
 * Aprobar/Desaprobar un comentario
 */
export const changeCommentApproval = <ThrowOnError extends boolean = false>(options: Options<ChangeCommentApprovalData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<ChangeCommentApprovalResponse, ChangeCommentApprovalError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/comments/approval/{comment_id}',
        ...options
    });
};

/**
 * Get Notifications
 */
export const getNotifications = <ThrowOnError extends boolean = false>(options?: Options<GetNotificationsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetNotificationsResponse, GetNotificationsError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/notifications/',
        ...options
    });
};

/**
 * Create Notification
 */
export const createNotification = <ThrowOnError extends boolean = false>(options: Options<CreateNotificationData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateNotificationResponse, CreateNotificationError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/notifications/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Eliminar una notificaci坦n
 * Elimina una notificaci坦n del sistema utilizando su ID.
 */
export const deleteNotification = <ThrowOnError extends boolean = false>(options: Options<DeleteNotificationData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteNotificationResponse, DeleteNotificationError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/notifications/{notification_id}',
        ...options
    });
};

/**
 * Get Notification By Id
 */
export const getNotificationById = <ThrowOnError extends boolean = false>(options: Options<GetNotificationByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetNotificationByIdResponse, GetNotificationByIdError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/notifications/{notification_id}',
        ...options
    });
};

/**
 * Marcar una notificaci坦n como le鱈da utilizando su ID
 */
export const readNotification = <ThrowOnError extends boolean = false>(options: Options<ReadNotificationData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<ReadNotificationResponse, ReadNotificationError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/notifications/{notification_id}',
        ...options
    });
};

/**
 * Obtener las notificaciones del usuario autenticado
 */
export const getMyNotifications = <ThrowOnError extends boolean = false>(options?: Options<GetMyNotificationsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetMyNotificationsResponse, GetMyNotificationsError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/notifications/user/me',
        ...options
    });
};

/**
 * Get Notifications By User Id
 */
export const getNotificationsByUserId = <ThrowOnError extends boolean = false>(options: Options<GetNotificationsByUserIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetNotificationsByUserIdResponse, GetNotificationsByUserIdError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/notifications/user/{user_id}',
        ...options
    });
};

/**
 * Listado de reportes
 * Obtiene un listado de reportes en el sistema.
 */
export const getReports = <ThrowOnError extends boolean = false>(options?: Options<GetReportsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetReportsResponse, GetReportsError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/reports/',
        ...options
    });
};

/**
 * Crear un reporte
 * Crea un reporte en el sistema.
 */
export const createReport = <ThrowOnError extends boolean = false>(options: Options<CreateReportData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateReportResponse, CreateReportError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/reports/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Listado de reportes de un problema
 * Obtiene un listado de reportes de un problema en espec鱈fico.
 */
export const getReportsByProblemId = <ThrowOnError extends boolean = false>(options: Options<GetReportsByProblemIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetReportsByProblemIdResponse, GetReportsByProblemIdError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/reports/problem/{problem_id}',
        ...options
    });
};

/**
 * Eliminar un reporte
 * Elimina un reporte del sistema utilizando su ID.
 */
export const deleteReport = <ThrowOnError extends boolean = false>(options: Options<DeleteReportData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteReportResponse, DeleteReportError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/reports/{report_id}',
        ...options
    });
};

/**
 * Actualizar un reporte
 * Actualiza un reporte en el sistema utilizando su ID.
 */
export const updateReport = <ThrowOnError extends boolean = false>(options: Options<UpdateReportData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UpdateReportResponse, UpdateReportError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/reports/{report_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Marcar un reporte como le鱈do
 * Utilizando el ID como par叩metro, actualiza el estado del reporte a le鱈do.
 */
export const readReport = <ThrowOnError extends boolean = false>(options: Options<ReadReportData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<ReadReportResponse, ReadReportError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/reports/read/{report_id}',
        ...options
    });
};

/**
 * Obtener todos los casos de prueba
 * Obtiene una lista con todos los casos de prueba registrados en el sistema.
 */
export const getTestCases = <ThrowOnError extends boolean = false>(options?: Options<GetTestCasesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetTestCasesResponse, GetTestCasesError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/testCases/',
        ...options
    });
};

/**
 * Crear un caso de prueba
 * Crea un nuevo caso de prueba en el sistema.
 *
 * El campo `inputs` debe ser una lista de objetos con los campos `type` y `value`, donde:
 * - `type` puede ser: "int", "string", "double", o "bool"
 * - `value` es el valor que debe ser compatible con el tipo especificado
 *
 * Ejemplo:
 * ```
 * [
 * {"type": "int", "value": 10},
 * {"type": "string", "value": "texto"},
 * {"type": "bool", "value": true}
 * ]
 * ```
 *
 * Esto se pasar鱈a como funcion(10, "texto", true)
 */
export const createTestCase = <ThrowOnError extends boolean = false>(options: Options<CreateTestCaseData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateTestCaseResponse, CreateTestCaseError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/testCases/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Obtener un caso de prueba por su ID
 * Obtiene un caso de prueba del sistema utilizando su ID como clave.
 */
export const getTestCaseById = <ThrowOnError extends boolean = false>(options: Options<GetTestCaseByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetTestCaseByIdResponse, GetTestCaseByIdError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/testCases/{testCase_id}',
        ...options
    });
};

/**
 * Obtener casos de prueba por problema
 * Obtiene una lista con todos los casos de prueba registrados en el sistema de un problema espec鱈fico.
 */
export const getTestCasesByProblemId = <ThrowOnError extends boolean = false>(options: Options<GetTestCasesByProblemIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetTestCasesByProblemIdResponse, GetTestCasesByProblemIdError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/testCases/problem/{problem_id}',
        ...options
    });
};

/**
 * Eliminar un caso de prueba
 * Elimina un caso de prueba del sistema utilizando su ID.
 */
export const deleteTestCase = <ThrowOnError extends boolean = false>(options: Options<DeleteTestCaseData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteTestCaseResponse, DeleteTestCaseError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/testCases/{test_case_id}',
        ...options
    });
};

/**
 * Actualizar un caso de prueba
 * Actualiza la informacion de un caso de prueba en el sistema utilizando su ID como clave.
 */
export const updateTestCase = <ThrowOnError extends boolean = false>(options: Options<UpdateTestCaseData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UpdateTestCaseResponse, UpdateTestCaseError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/testCases/{test_case_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get Feedback
 * Obtiene retroalimentaci坦n sobre el c坦digo proporcionado.
 *
 * Este endpoint utiliza un modelo de IA para analizar el c坦digo y proporcionar sugerencias de mejora.
 */
export const getFeedback = <ThrowOnError extends boolean = false>(options: Options<GetFeedbackData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<GetFeedbackResponse, GetFeedbackError, ThrowOnError>({
        url: '/code/feedback',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Code
 * Este endpoint se utilizar叩 para anlizar el c坦digo en las entregas de los estudiantes.
 */
export const code = <ThrowOnError extends boolean = false>(options?: Options<CodeData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        url: '/code/analyze',
        ...options
    });
};

/**
 * Compile Code
 * Compila y ejecuta c坦digo en el lenguaje especificado.
 */
export const compileCode = <ThrowOnError extends boolean = false>(options: Options<CompileCodeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CompileCodeResponse, CompileCodeError, ThrowOnError>({
        url: '/code/compile',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};