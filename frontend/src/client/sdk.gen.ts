// This file is auto-generated by @hey-api/openapi-ts

import { type Options as ClientOptions, type TDataShape, type Client, urlSearchParamsBodySerializer } from '@hey-api/client-axios';
import type { GetData, GetResponse, GetError, GetOpenapiJsonData, GetOpenapiJsonResponse, GetOpenapiJsonError, PostAuthAccessTokenData, PostAuthAccessTokenResponse, PostAuthAccessTokenError, PostAuthRegisterData, PostAuthRegisterResponse, PostAuthRegisterError, PostAuthPasswordRecoveryData, PostAuthPasswordRecoveryResponse, PostAuthPasswordRecoveryError, PostAuthPasswordResetData, PostAuthPasswordResetResponse, PostAuthPasswordResetError, PostAuthVerifyRegisterTokenData, PostAuthVerifyRegisterTokenResponse, PostAuthVerifyRegisterTokenError, PostAuthVerifyAccountData, PostAuthVerifyAccountResponse, PostAuthVerifyAccountError, GetUsersData, GetUsersResponse, GetUsersError, PostUsersData, PostUsersResponse, PostUsersError, DeleteUsersMeData, DeleteUsersMeResponse, DeleteUsersMeError, GetUsersMeData, GetUsersMeResponse, GetUsersMeError, PatchUsersMeData, PatchUsersMeResponse, PatchUsersMeError, GetUsersIdByUserIdData, GetUsersIdByUserIdResponse, GetUsersIdByUserIdError, GetUsersByUsernameData, GetUsersByUsernameResponse, GetUsersByUsernameError, DeleteUsersByUserIdData, DeleteUsersByUserIdResponse, DeleteUsersByUserIdError, PatchUsersByUserIdData, PatchUsersByUserIdResponse, PatchUsersByUserIdError, GetSubmissionsData, GetSubmissionsResponse, GetSubmissionsError, PostSubmissionsData, PostSubmissionsResponse, PostSubmissionsError, GetSubmissionsUserByUserIdData, GetSubmissionsUserByUserIdResponse, GetSubmissionsUserByUserIdError, GetSubmissionsBySubmissionIdData, GetSubmissionsBySubmissionIdResponse, GetSubmissionsBySubmissionIdError, PatchSubmissionsBySubmissionIdData, PatchSubmissionsBySubmissionIdResponse, PatchSubmissionsBySubmissionIdError, GetProblemsData, GetProblemsResponse, GetProblemsError, PostProblemsData, PostProblemsResponse, PostProblemsError, GetProblemsIdByProblemIdData, GetProblemsIdByProblemIdResponse, GetProblemsIdByProblemIdError, GetProblemsBlockByBlockData, GetProblemsBlockByBlockResponse, GetProblemsBlockByBlockError, GetProblemsProblemBlocksData, GetProblemsProblemBlocksResponse, GetProblemsProblemBlocksError, GetProblemsDifficultyByDifficultyData, GetProblemsDifficultyByDifficultyResponse, GetProblemsDifficultyByDifficultyError, DeleteProblemsByProblemIdData, DeleteProblemsByProblemIdResponse, DeleteProblemsByProblemIdError, PatchProblemsByProblemIdData, PatchProblemsByProblemIdResponse, PatchProblemsByProblemIdError, GetRolesData, GetRolesResponse, GetRolesError, PostRolesData, PostRolesResponse, PostRolesError, DeleteRolesByRoleNameData, DeleteRolesByRoleNameResponse, DeleteRolesByRoleNameError, GetRolesByRoleNameData, GetRolesByRoleNameResponse, GetRolesByRoleNameError, PatchRolesByRoleNameData, PatchRolesByRoleNameResponse, PatchRolesByRoleNameError, PostRolesByRoleNameAssignByUserIdData, PostRolesByRoleNameAssignByUserIdResponse, PostRolesByRoleNameAssignByUserIdError, PostRolesByRoleNameRevokeByUserIdData, PostRolesByRoleNameRevokeByUserIdResponse, PostRolesByRoleNameRevokeByUserIdError, GetRolesUserByUserIdData, GetRolesUserByUserIdResponse, GetRolesUserByUserIdError, GetRolesByRoleNameUsersData, GetRolesByRoleNameUsersResponse, GetRolesByRoleNameUsersError, GetCommentsData, GetCommentsResponse, GetCommentsError, PostCommentsData, PostCommentsResponse, PostCommentsError, DeleteCommentsByCommentIdData, DeleteCommentsByCommentIdResponse, DeleteCommentsByCommentIdError, GetCommentsByCommentIdData, GetCommentsByCommentIdResponse, GetCommentsByCommentIdError, PatchCommentsByCommentIdData, PatchCommentsByCommentIdResponse, PatchCommentsByCommentIdError, GetCommentsUserByUserIdData, GetCommentsUserByUserIdResponse, GetCommentsUserByUserIdError, GetNotificationsData, GetNotificationsResponse, GetNotificationsError, PostNotificationsData, PostNotificationsResponse, PostNotificationsError, DeleteNotificationsByNotificationIdData, DeleteNotificationsByNotificationIdResponse, DeleteNotificationsByNotificationIdError, GetNotificationsByNotificationIdData, GetNotificationsByNotificationIdResponse, GetNotificationsByNotificationIdError, PatchNotificationsByNotificationIdData, PatchNotificationsByNotificationIdResponse, PatchNotificationsByNotificationIdError, GetNotificationsUserMeData, GetNotificationsUserMeResponse, GetNotificationsUserMeError, GetNotificationsUserByUserIdData, GetNotificationsUserByUserIdResponse, GetNotificationsUserByUserIdError, GetReportsData, GetReportsResponse, GetReportsError, PostReportsData, PostReportsResponse, PostReportsError, GetReportsProblemByProblemIdData, GetReportsProblemByProblemIdResponse, GetReportsProblemByProblemIdError, DeleteReportsByReportIdData, DeleteReportsByReportIdResponse, DeleteReportsByReportIdError, PatchReportsByReportIdData, PatchReportsByReportIdResponse, PatchReportsByReportIdError, GetTestCasesData, GetTestCasesResponse, GetTestCasesError, PostTestCasesData, PostTestCasesResponse, PostTestCasesError, DeleteTestCasesByTestCaseIdData, DeleteTestCasesByTestCaseIdResponse, DeleteTestCasesByTestCaseIdError, GetTestCasesByTestCaseIdData, GetTestCasesByTestCaseIdResponse, GetTestCasesByTestCaseIdError, PatchTestCasesByTestCaseIdData, PatchTestCasesByTestCaseIdResponse, PatchTestCasesByTestCaseIdError, GetTestCasesProblemByProblemIdData, GetTestCasesProblemByProblemIdResponse, GetTestCasesProblemByProblemIdError, PostCodeData, PostCodeResponse, PostCodeError } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Read Root
 */
export const get = <ThrowOnError extends boolean = false>(options?: Options<GetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetResponse, GetError, ThrowOnError>({
        url: '/',
        ...options
    });
};

/**
 * Openapi
 */
export const getOpenapiJson = <ThrowOnError extends boolean = false>(options?: Options<GetOpenapiJsonData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetOpenapiJsonResponse, GetOpenapiJsonError, ThrowOnError>({
        url: '/openapi.json',
        ...options
    });
};

/**
 * Generar token de acceso
 * Solicita datos de inicio de sesion y genera un token de acceso para el usuario.
 */
export const postAuthAccessToken = <ThrowOnError extends boolean = false>(options: Options<PostAuthAccessTokenData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostAuthAccessTokenResponse, PostAuthAccessTokenError, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        url: '/auth/access-token',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        }
    });
};

/**
 * Registrar un usuario
 * Registra un nuevo usuario en el sistema con datos minimos.
 */
export const postAuthRegister = <ThrowOnError extends boolean = false>(options: Options<PostAuthRegisterData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostAuthRegisterResponse, PostAuthRegisterError, ThrowOnError>({
        url: '/auth/register',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Solicitar recuperacion de contrase単a
 * El usuario solicita recuperar su contrase単a. Se enviara un correo electronico con el token de recuperacion.
 */
export const postAuthPasswordRecovery = <ThrowOnError extends boolean = false>(options: Options<PostAuthPasswordRecoveryData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostAuthPasswordRecoveryResponse, PostAuthPasswordRecoveryError, ThrowOnError>({
        url: '/auth/password-recovery',
        ...options
    });
};

/**
 * Restablecer contrase単a
 * El usuario introduce los datos de su nueva contrase単a y el token de recuperacion.
 */
export const postAuthPasswordReset = <ThrowOnError extends boolean = false>(options: Options<PostAuthPasswordResetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostAuthPasswordResetResponse, PostAuthPasswordResetError, ThrowOnError>({
        url: '/auth/password-reset',
        ...options
    });
};

/**
 * Solicitar token de registro
 * El usuario solicita el token de verificacion y para poder verificar su cuenta.
 */
export const postAuthVerifyRegisterToken = <ThrowOnError extends boolean = false>(options: Options<PostAuthVerifyRegisterTokenData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostAuthVerifyRegisterTokenResponse, PostAuthVerifyRegisterTokenError, ThrowOnError>({
        url: '/auth/verify-register-token',
        ...options
    });
};

/**
 * Verificar cuenta de usuario
 * El usuario introduce el token de verificacion y se le activa la cuenta.
 */
export const postAuthVerifyAccount = <ThrowOnError extends boolean = false>(options: Options<PostAuthVerifyAccountData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostAuthVerifyAccountResponse, PostAuthVerifyAccountError, ThrowOnError>({
        url: '/auth/verify-account',
        ...options
    });
};

/**
 * Obtener todos los usuarios
 * Obtiene una lista con todos los usuarios registrados en el sistema.
 */
export const getUsers = <ThrowOnError extends boolean = false>(options?: Options<GetUsersData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetUsersResponse, GetUsersError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users/',
        ...options
    });
};

/**
 * Crear un usuario
 * Crea un nuevo usuario en el sistema.
 */
export const postUsers = <ThrowOnError extends boolean = false>(options: Options<PostUsersData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostUsersResponse, PostUsersError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Eliminar el usuario actual
 * Elimina el usuario que ha iniciado sesi坦n en el sistema.
 */
export const deleteUsersMe = <ThrowOnError extends boolean = false>(options?: Options<DeleteUsersMeData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).delete<DeleteUsersMeResponse, DeleteUsersMeError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users/me',
        ...options
    });
};

/**
 * Obtener el usuario actual
 * Obtiene el usuario que ha iniciado sesi坦n en el sistema.
 */
export const getUsersMe = <ThrowOnError extends boolean = false>(options?: Options<GetUsersMeData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetUsersMeResponse, GetUsersMeError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users/me',
        ...options
    });
};

/**
 * Actualizar el usuario actual
 * Actualiza uno o varios campos del usuario que ha iniciado sesi坦n en el sistema.
 */
export const patchUsersMe = <ThrowOnError extends boolean = false>(options: Options<PatchUsersMeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<PatchUsersMeResponse, PatchUsersMeError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users/me',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Obtener un usuario por su ID
 * Obtiene un usuario del sistema utilizando su ID como clave.
 */
export const getUsersIdByUserId = <ThrowOnError extends boolean = false>(options: Options<GetUsersIdByUserIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetUsersIdByUserIdResponse, GetUsersIdByUserIdError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users/id:{user_id}',
        ...options
    });
};

/**
 * Obtener un usuario por su nombre de usuario
 * Obtiene un usuario del sistema utilizando su nombre de usuario como clave.
 */
export const getUsersByUsername = <ThrowOnError extends boolean = false>(options: Options<GetUsersByUsernameData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetUsersByUsernameResponse, GetUsersByUsernameError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users/{username}',
        ...options
    });
};

/**
 * Eliminar un usuario
 * Elimina un usuario del sistema utilizando su ID como clave.
 */
export const deleteUsersByUserId = <ThrowOnError extends boolean = false>(options: Options<DeleteUsersByUserIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteUsersByUserIdResponse, DeleteUsersByUserIdError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users/{user_id}',
        ...options
    });
};

/**
 * Actualizar un usuario
 * Actualiza uno o varios campos de un usuario en el sistema utilizando su ID como clave.
 */
export const patchUsersByUserId = <ThrowOnError extends boolean = false>(options: Options<PatchUsersByUserIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<PatchUsersByUserIdResponse, PatchUsersByUserIdError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users/{user_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Obtener todas las entregas
 * Obtiene una lista con todas las entregas registradas en el sistema.
 */
export const getSubmissions = <ThrowOnError extends boolean = false>(options?: Options<GetSubmissionsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetSubmissionsResponse, GetSubmissionsError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/submissions/',
        ...options
    });
};

/**
 * Crear una entrega
 * Crea una nueva entrega en el sistema.
 */
export const postSubmissions = <ThrowOnError extends boolean = false>(options: Options<PostSubmissionsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostSubmissionsResponse, PostSubmissionsError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/submissions/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Obtener entregas por ID de usuario
 * Obtiene una lista con todas las entregas registradas en el sistema realizadas por un usuario.
 */
export const getSubmissionsUserByUserId = <ThrowOnError extends boolean = false>(options: Options<GetSubmissionsUserByUserIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetSubmissionsUserByUserIdResponse, GetSubmissionsUserByUserIdError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/submissions/user/{user_id}',
        ...options
    });
};

/**
 * Obtener una entrega por su ID
 * Obtiene una entrega del sistema utilizando su ID como clave.
 */
export const getSubmissionsBySubmissionId = <ThrowOnError extends boolean = false>(options: Options<GetSubmissionsBySubmissionIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetSubmissionsBySubmissionIdResponse, GetSubmissionsBySubmissionIdError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/submissions/{submission_id}',
        ...options
    });
};

/**
 * Actualizar una entrega
 * Actualiza una entrega en el sistema utilizando su ID como clave.
 */
export const patchSubmissionsBySubmissionId = <ThrowOnError extends boolean = false>(options: Options<PatchSubmissionsBySubmissionIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<PatchSubmissionsBySubmissionIdResponse, PatchSubmissionsBySubmissionIdError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/submissions/{submission_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Obtener todos los problemas
 * Obtiene una lista con todos los problemas registrados en el sistema.
 */
export const getProblems = <ThrowOnError extends boolean = false>(options?: Options<GetProblemsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetProblemsResponse, GetProblemsError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/problems/',
        ...options
    });
};

/**
 * Crear un problema
 * Crea un nuevo problema en el sistema.
 */
export const postProblems = <ThrowOnError extends boolean = false>(options: Options<PostProblemsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostProblemsResponse, PostProblemsError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/problems/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Obtener un problema por su ID
 * Obtiene un problema del sistema utilizando su ID como clave.
 */
export const getProblemsIdByProblemId = <ThrowOnError extends boolean = false>(options: Options<GetProblemsIdByProblemIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetProblemsIdByProblemIdResponse, GetProblemsIdByProblemIdError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/problems/id:{problem_id}',
        ...options
    });
};

/**
 * Obtener problemas de un bloque
 * Obtiene una lista con todos los problemas registrados en el sistema de un bloque espec鱈fico.
 */
export const getProblemsBlockByBlock = <ThrowOnError extends boolean = false>(options: Options<GetProblemsBlockByBlockData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetProblemsBlockByBlockResponse, GetProblemsBlockByBlockError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/problems/block/{block}',
        ...options
    });
};

/**
 * Obtener bloques de problemas
 * Obtiene una lista con todos los bloques de problemas registrados en el sistema.
 */
export const getProblemsProblemBlocks = <ThrowOnError extends boolean = false>(options?: Options<GetProblemsProblemBlocksData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetProblemsProblemBlocksResponse, GetProblemsProblemBlocksError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/problems/problem-blocks',
        ...options
    });
};

/**
 * Obtener problemas por dificultad
 * Devuelve una lista de problemas filtrados por dificultad.
 */
export const getProblemsDifficultyByDifficulty = <ThrowOnError extends boolean = false>(options: Options<GetProblemsDifficultyByDifficultyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetProblemsDifficultyByDifficultyResponse, GetProblemsDifficultyByDifficultyError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/problems/difficulty/{difficulty}',
        ...options
    });
};

/**
 * Eliminar un problema
 * Elimina un problema del sistema utilizando su ID.
 */
export const deleteProblemsByProblemId = <ThrowOnError extends boolean = false>(options: Options<DeleteProblemsByProblemIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteProblemsByProblemIdResponse, DeleteProblemsByProblemIdError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/problems/{problem_id}',
        ...options
    });
};

/**
 * Actualizar un problema
 * Actualiza un problema del sistema utilizando su ID como clave.
 */
export const patchProblemsByProblemId = <ThrowOnError extends boolean = false>(options: Options<PatchProblemsByProblemIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<PatchProblemsByProblemIdResponse, PatchProblemsByProblemIdError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/problems/{problem_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Obtener todos los roles
 * Obtiene todos los roles del sistema.
 */
export const getRoles = <ThrowOnError extends boolean = false>(options?: Options<GetRolesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetRolesResponse, GetRolesError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/roles/',
        ...options
    });
};

/**
 * Crear un rol
 * Crea un nuevo rol en el sistema.
 */
export const postRoles = <ThrowOnError extends boolean = false>(options: Options<PostRolesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostRolesResponse, PostRolesError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/roles/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Eliminar un rol
 * Elimina un rol del sistema utilizando su ID.
 */
export const deleteRolesByRoleName = <ThrowOnError extends boolean = false>(options: Options<DeleteRolesByRoleNameData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteRolesByRoleNameResponse, DeleteRolesByRoleNameError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/roles/{role_name}',
        ...options
    });
};

/**
 * Obtener un rol por su ID
 * Obtiene un rol del sistema utilizando su ID.
 */
export const getRolesByRoleName = <ThrowOnError extends boolean = false>(options: Options<GetRolesByRoleNameData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetRolesByRoleNameResponse, GetRolesByRoleNameError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/roles/{role_name}',
        ...options
    });
};

/**
 * Actualizar un rol
 * Actualiza un rol del sistema utilizando su ID.
 */
export const patchRolesByRoleName = <ThrowOnError extends boolean = false>(options: Options<PatchRolesByRoleNameData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<PatchRolesByRoleNameResponse, PatchRolesByRoleNameError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/roles/{role_name}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Asignar un rol a un usuario
 * Asigna un rol a un usuario.
 */
export const postRolesByRoleNameAssignByUserId = <ThrowOnError extends boolean = false>(options: Options<PostRolesByRoleNameAssignByUserIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostRolesByRoleNameAssignByUserIdResponse, PostRolesByRoleNameAssignByUserIdError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/roles/{role_name}/assign/{user_id}',
        ...options
    });
};

/**
 * Revocar un rol a un usuario
 * Revoca un rol a un usuario.
 */
export const postRolesByRoleNameRevokeByUserId = <ThrowOnError extends boolean = false>(options: Options<PostRolesByRoleNameRevokeByUserIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostRolesByRoleNameRevokeByUserIdResponse, PostRolesByRoleNameRevokeByUserIdError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/roles/{role_name}/revoke/{user_id}',
        ...options
    });
};

/**
 * Obtener todos los roles de un usuario
 * Obtiene todos los roles de un usuario.
 */
export const getRolesUserByUserId = <ThrowOnError extends boolean = false>(options: Options<GetRolesUserByUserIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetRolesUserByUserIdResponse, GetRolesUserByUserIdError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/roles/user/{user_id}',
        ...options
    });
};

/**
 * Obtener todos los usuarios de un rol
 * Obtiene todos los usuarios de un rol.
 */
export const getRolesByRoleNameUsers = <ThrowOnError extends boolean = false>(options: Options<GetRolesByRoleNameUsersData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetRolesByRoleNameUsersResponse, GetRolesByRoleNameUsersError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/roles/{role_name}/users',
        ...options
    });
};

/**
 * Obtener todos los comentarios
 * Obtiene una lista con todos los comentarios registrados en el sistema.
 */
export const getComments = <ThrowOnError extends boolean = false>(options?: Options<GetCommentsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetCommentsResponse, GetCommentsError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/comments/',
        ...options
    });
};

/**
 * Crear un comentario
 * Crea un nuevo comentario en el sistema.
 */
export const postComments = <ThrowOnError extends boolean = false>(options: Options<PostCommentsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostCommentsResponse, PostCommentsError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/comments/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Eliminar un comentario
 * Elimina un comentario del sistema utilizando su ID.
 */
export const deleteCommentsByCommentId = <ThrowOnError extends boolean = false>(options: Options<DeleteCommentsByCommentIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteCommentsByCommentIdResponse, DeleteCommentsByCommentIdError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/comments/{comment_id}',
        ...options
    });
};

/**
 * Obtener un comentario por su ID
 * Obtiene un comentario del sistema utilizando su ID como clave.
 */
export const getCommentsByCommentId = <ThrowOnError extends boolean = false>(options: Options<GetCommentsByCommentIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetCommentsByCommentIdResponse, GetCommentsByCommentIdError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/comments/{comment_id}',
        ...options
    });
};

/**
 * Actualizar un comentario
 * Actualiza un comentario del sistema utilizando su ID como clave.
 */
export const patchCommentsByCommentId = <ThrowOnError extends boolean = false>(options: Options<PatchCommentsByCommentIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<PatchCommentsByCommentIdResponse, PatchCommentsByCommentIdError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/comments/{comment_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Obtener comentarios por ID de usuario
 * Obtiene una lista con todos los comentarios registrados en el sistema realizados por un usuario.
 */
export const getCommentsUserByUserId = <ThrowOnError extends boolean = false>(options: Options<GetCommentsUserByUserIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetCommentsUserByUserIdResponse, GetCommentsUserByUserIdError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/comments/user/{user_id}',
        ...options
    });
};

/**
 * Get Notifications
 */
export const getNotifications = <ThrowOnError extends boolean = false>(options?: Options<GetNotificationsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetNotificationsResponse, GetNotificationsError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/notifications/',
        ...options
    });
};

/**
 * Create Notification
 */
export const postNotifications = <ThrowOnError extends boolean = false>(options: Options<PostNotificationsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostNotificationsResponse, PostNotificationsError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/notifications/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Eliminar una notificaci坦n
 * Elimina una notificaci坦n del sistema utilizando su ID.
 */
export const deleteNotificationsByNotificationId = <ThrowOnError extends boolean = false>(options: Options<DeleteNotificationsByNotificationIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteNotificationsByNotificationIdResponse, DeleteNotificationsByNotificationIdError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/notifications/{notification_id}',
        ...options
    });
};

/**
 * Get Notification By Id
 */
export const getNotificationsByNotificationId = <ThrowOnError extends boolean = false>(options: Options<GetNotificationsByNotificationIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetNotificationsByNotificationIdResponse, GetNotificationsByNotificationIdError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/notifications/{notification_id}',
        ...options
    });
};

/**
 * Cambia el estado de una notificaci坦n
 * Cambia el estado de una notificaci坦n, de leido a no leido y viceversa. Utilizando el ID para identificarlo
 */
export const patchNotificationsByNotificationId = <ThrowOnError extends boolean = false>(options: Options<PatchNotificationsByNotificationIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<PatchNotificationsByNotificationIdResponse, PatchNotificationsByNotificationIdError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/notifications/{notification_id}',
        ...options
    });
};

/**
 * Obtener las notificaciones del usuario autenticado
 */
export const getNotificationsUserMe = <ThrowOnError extends boolean = false>(options?: Options<GetNotificationsUserMeData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetNotificationsUserMeResponse, GetNotificationsUserMeError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/notifications/user/me',
        ...options
    });
};

/**
 * Get Notifications By User Id
 */
export const getNotificationsUserByUserId = <ThrowOnError extends boolean = false>(options: Options<GetNotificationsUserByUserIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetNotificationsUserByUserIdResponse, GetNotificationsUserByUserIdError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/notifications/user/{user_id}',
        ...options
    });
};

/**
 * Listado de reportes
 * Obtiene un listado de reportes en el sistema.
 */
export const getReports = <ThrowOnError extends boolean = false>(options?: Options<GetReportsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetReportsResponse, GetReportsError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/reports/',
        ...options
    });
};

/**
 * Crear un reporte
 * Crea un reporte en el sistema.
 */
export const postReports = <ThrowOnError extends boolean = false>(options: Options<PostReportsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostReportsResponse, PostReportsError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/reports/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Listado de reportes de un problema
 * Obtiene un listado de reportes de un problema en espec鱈fico.
 */
export const getReportsProblemByProblemId = <ThrowOnError extends boolean = false>(options: Options<GetReportsProblemByProblemIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetReportsProblemByProblemIdResponse, GetReportsProblemByProblemIdError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/reports/problem/{problem_id}',
        ...options
    });
};

/**
 * Eliminar un reporte
 * Elimina un reporte del sistema utilizando su ID.
 */
export const deleteReportsByReportId = <ThrowOnError extends boolean = false>(options: Options<DeleteReportsByReportIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteReportsByReportIdResponse, DeleteReportsByReportIdError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/reports/{report_id}',
        ...options
    });
};

/**
 * Cambiar estado de un reporte
 * Cambia el estado de un reporte, de pendiente a resuelto y viceversa. Utilizando el ID para identificarlo.
 */
export const patchReportsByReportId = <ThrowOnError extends boolean = false>(options: Options<PatchReportsByReportIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<PatchReportsByReportIdResponse, PatchReportsByReportIdError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/reports/{report_id}',
        ...options
    });
};

/**
 * Obtener todos los casos de prueba
 * Obtiene una lista con todos los casos de prueba registrados en el sistema.
 */
export const getTestCases = <ThrowOnError extends boolean = false>(options?: Options<GetTestCasesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetTestCasesResponse, GetTestCasesError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/testCases/',
        ...options
    });
};

/**
 * Crear un caso de prueba
 * Crea un nuevo caso de prueba en el sistema.
 */
export const postTestCases = <ThrowOnError extends boolean = false>(options: Options<PostTestCasesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostTestCasesResponse, PostTestCasesError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/testCases/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Eliminar un caso de prueba
 * Elimina un caso de prueba del sistema utilizando su ID.
 */
export const deleteTestCasesByTestCaseId = <ThrowOnError extends boolean = false>(options: Options<DeleteTestCasesByTestCaseIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteTestCasesByTestCaseIdResponse, DeleteTestCasesByTestCaseIdError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/testCases/{testCase_id}',
        ...options
    });
};

/**
 * Obtener un caso de prueba por su ID
 * Obtiene un caso de prueba del sistema utilizando su ID como clave.
 */
export const getTestCasesByTestCaseId = <ThrowOnError extends boolean = false>(options: Options<GetTestCasesByTestCaseIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetTestCasesByTestCaseIdResponse, GetTestCasesByTestCaseIdError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/testCases/{testCase_id}',
        ...options
    });
};

/**
 * Actualizar un caso de prueba
 * Actualiza la informacion de un caso de prueba en el sistema utilizando su ID como clave.
 */
export const patchTestCasesByTestCaseId = <ThrowOnError extends boolean = false>(options: Options<PatchTestCasesByTestCaseIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<PatchTestCasesByTestCaseIdResponse, PatchTestCasesByTestCaseIdError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/testCases/{testCase_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Obtener casos de prueba por problema
 * Obtiene una lista con todos los casos de prueba registrados en el sistema de un problema espec鱈fico.
 */
export const getTestCasesProblemByProblemId = <ThrowOnError extends boolean = false>(options: Options<GetTestCasesProblemByProblemIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetTestCasesProblemByProblemIdResponse, GetTestCasesProblemByProblemIdError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/testCases/problem/{problem_id}',
        ...options
    });
};

/**
 * Code
 */
export const postCode = <ThrowOnError extends boolean = false>(options: Options<PostCodeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostCodeResponse, PostCodeError, ThrowOnError>({
        url: '/code/',
        ...options
    });
};