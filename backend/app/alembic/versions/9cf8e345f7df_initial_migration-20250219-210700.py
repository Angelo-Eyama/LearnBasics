"""Initial migration

Revision ID: 9cf8e345f7df
Revises: 
Create Date: 2025-02-19 21:07:00.229675

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import sqlmodel.sql.sqltypes


# revision identifiers, used by Alembic.
revision: str = '9cf8e345f7df'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    roles_table = op.create_table('roles',
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.PrimaryKeyConstraint('name'),
    if_not_exists=True
    )
    users_table = op.create_table('users',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('username', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('password', sa.LargeBinary(), nullable=True),
    sa.Column('firstName', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('lastName', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('email', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('score', sa.Integer(), nullable=True),
    sa.Column('creationDate', sa.DateTime(), nullable=True),
    sa.Column('active', sa.Boolean(), nullable=False, comment='Indica si el usuario puede acceder o no.'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('username'),
    if_not_exists=True
    )
    op.create_table('notifications',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('content', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('read', sa.Boolean(), nullable=False),
    sa.Column('timePosted', sa.DateTime(), nullable=True),
    sa.Column('userID', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['userID'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    if_not_exists=True
    )
    op.create_table('problems',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('title', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('block', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('difficulty', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('score', sa.Integer(), nullable=False),
    sa.Column('authorID', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['authorID'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    if_not_exists=True
    )
    user_roles_table = op.create_table('user_roles',
    sa.Column('userID', sa.Integer(), nullable=False),
    sa.Column('roleName', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.ForeignKeyConstraint(['roleName'], ['roles.name'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['userID'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('userID', 'roleName'),
    if_not_exists=True
    )
    op.create_table('comments',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('content', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('timePosted', sa.DateTime(), nullable=True),
    sa.Column('problemID', sa.Integer(), nullable=False),
    sa.Column('userID', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['problemID'], ['problems.id'], ),
    sa.ForeignKeyConstraint(['userID'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    if_not_exists=True
    )
    op.create_table('reports',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('content', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('timePosted', sa.DateTime(), nullable=True),
    sa.Column('read', sa.Boolean(), nullable=False),
    sa.Column('problemID', sa.Integer(), nullable=False),
    sa.Column('userID', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['problemID'], ['problems.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['userID'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    if_not_exists=True
    )
    op.create_table('submissions',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('code', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('language', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('status', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('timeSubmitted', sa.DateTime(), nullable=True),
    sa.Column('timeUpdated', sa.DateTime(), nullable=True),
    sa.Column('suggestions', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('problemID', sa.Integer(), nullable=False),
    sa.Column('userID', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['problemID'], ['problems.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['userID'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    if_not_exists=True
    )
    op.create_table('test_cases',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('problemID', sa.Integer(), nullable=False),
    sa.Column('input', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('output', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.ForeignKeyConstraint(['problemID'], ['problems.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    if_not_exists=True
    )
    ## Create data
    # Insertar datos en las tablas
    op.bulk_insert(
        roles_table,
        [
            {'name': 'administrador', 'description': 'Administrador de la aplicacion, tiene acceso ilimitado a cualquier recurso'},
            {'name': 'moderador', 'description': 'Editor de la aplicacion, puede editar contenido'},
            {'name': 'estudiante', 'description': 'Usuario normal de la aplicacion'}
        ]
    )
    
    op.bulk_insert(
        users_table,
        [
            {'id': 1, 'username': 'ruler', 'password': b'$2b$12$AIdF3RcSmARfVkk0f9pKYeL1X4TWTOLIFzLoNhGfRxwqWuviyydiW', 'firstName': 'Lord', 'lastName': 'Ruler', 'email': 'ruler@name.com', 'score': 0, 'creationDate': '2025-02-02 02:03:28', 'active': True},
            {'id': 2, 'username': 'admin', 'password': b'$2b$12$AIdF3RcSmARfVkk0f9pKYeL1X4TWTOLIFzLoNhGfRxwqWuviyydiW', 'firstName': 'Admin', 'lastName': 'Admin', 'email': 'admin@mail.com', 'score': 0, 'creationDate': '2025-01-22 23:17:43', 'active': True},
            {'id': 3, 'username': 'moderator', 'password': b'$2b$12$AIdF3RcSmARfVkk0f9pKYeL1X4TWTOLIFzLoNhGfRxwqWuviyydiW', 'firstName': 'string', 'lastName': 'string', 'email': 'user@example.com', 'score': 10, 'creationDate': '2025-01-22 23:17:43', 'active': False},
            {'id': 4, 'username': 'user', 'password': b'$2b$12$AIdF3RcSmARfVkk0f9pKYeL1X4TWTOLIFzLoNhGfRxwqWuviyydiW', 'firstName': 'User', 'lastName': 'User', 'email': 'user@mail.com', 'score': 0, 'creationDate': '2025-01-22 23:17:43', 'active': True},
            {'id': 5, 'username': 'jdoe', 'password': b'$2b$12$AIdF3RcSmARfVkk0f9pKYeL1X4TWTOLIFzLoNhGfRxwqWuviyydiW', 'firstName': 'John', 'lastName': 'Doe', 'email': 'jdoe@mail.com', 'score': 0, 'creationDate': '2025-01-22 23:54:43', 'active': True},
            {'id': 6, 'username': 'janeDoe', 'password': b'$2b$12$AIdF3RcSmARfVkk0f9pKYeL1X4TWTOLIFzLoNhGfRxwqWuviyydiW', 'firstName': 'Jane', 'lastName': 'Doe', 'email': 'mail@mail.com', 'score': 0, 'creationDate': '2025-01-28 16:46:06', 'active': True},
            {'id': 9, 'username': 'archer', 'password': b'$2b$12$d5xDsk0yUvgpIDXFDK/RheSz0PEugPoluCYc3sGpN0YMDNRyMjjCG', 'firstName': 'shirou', 'lastName': 'emiya', 'email': 'fate@mail.com', 'score': 0, 'creationDate': '2025-02-05 00:07:49', 'active': True}
        ]
    )
    
    op.bulk_insert(
        user_roles_table,
        [
            {'userID': 1, 'roleName': 'administrador'},
            {'userID': 1, 'roleName': 'estudiante'},
            {'userID': 1, 'roleName': 'moderador'},
            {'userID': 2, 'roleName': 'estudiante'},
            {'userID': 3, 'roleName': 'moderador'},
            {'userID': 4, 'roleName': 'estudiante'},
            {'userID': 5, 'roleName': 'moderador'},
            {'userID': 6, 'roleName': 'estudiante'},
            {'userID': 9, 'roleName': 'estudiante'}
        ]
    )
    ## End of data creation
    
    
    
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('test_cases')
    op.drop_table('submissions')
    op.drop_table('reports')
    op.drop_table('comments')
    op.drop_table('user_roles')
    op.drop_table('problems')
    op.drop_table('notifications')
    op.drop_table('users')
    op.drop_table('roles')
    # ### end Alembic commands ###
